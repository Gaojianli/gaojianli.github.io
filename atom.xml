<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>高渐离の屋</title>
  
  <subtitle>一个不起眼的个人小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.gaojianli.me/"/>
  <updated>2020-12-10T18:22:25.031Z</updated>
  <id>https://blog.gaojianli.me/</id>
  
  <author>
    <name>高渐离</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写在中国宪法日</title>
    <link href="https://blog.gaojianli.me/2020/12/04/%E5%86%99%E5%9C%A8%E4%B8%AD%E5%9B%BD%E5%AE%AA%E6%B3%95%E6%97%A5/"/>
    <id>https://blog.gaojianli.me/2020/12/04/%E5%86%99%E5%9C%A8%E4%B8%AD%E5%9B%BD%E5%AE%AA%E6%B3%95%E6%97%A5/</id>
    <published>2020-12-04T18:16:15.000Z</published>
    <updated>2020-12-10T18:22:25.031Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>他从996的公司下班骑着ofo回到了蛋壳租的公寓看杨超越丁真——CyberPunk</p></blockquote><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>今天是12月4日，中国宪法日。同时也是香风智乃的生日，虽然宪法离我非常遥远，我也不看点兔，但今天着实也是于我而言重要的一天。在这一天，我持续三年的初恋正式宣告终结。现在找点空位在这里倒垃圾，顺便键政一下。<br>就结果而言，人的感情其实相当脆弱，三年的感情也可能在短短几小时内毁于一旦。常言道：“知人知面不知心”，人的价值观远远不是短短三年就能看清的。既然已经结束，我也不想发表什么言论，骂她啊啥的不过是幼稚的行为，根本上她也只是受害者，今天是想来谈谈事情的前因后果以及对时事的一些思考。</p><a id="more"></a><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>我前女友对于肖战是完全的不感冒，我个人老二次元了，自然也不会关心这方面的事情。我曾经一度认为饭圈文化离我们很远，直到丁真的出现。自从丁真火了之后，她便被其疯狂圈粉，手机壁纸也从小栗旬换成了丁真，每日高强度在论坛和anti对线，一口一个“🍋🐔”。丁真，一个远在理塘的人，我自然犯不着去吃他的醋，但是由此而言产生的争论才是真正破裂的原因。</p><p>昨日，华春莹连发三条推特为其站台，在每天中午的键政时间中，我自然为这种行为表示了担忧。没想到就因为这个原因，我也被贴上了“酸，嫉妒”的标签，一瞬间她仿佛不再是那个熟悉的她，而是化身微博女拳师。由此产生了一些争论，最后造成了感情的破裂，个中细节，家长里短，在此略过不谈。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>主要是想谈谈对于“丁真现象”的思考。大部分人对于丁真的恶意来源应该都是认为其“德不配位”吧，一个文盲却能爆红于网络，由此产生了“酸”、“嫉妒”的感情，大有早年间“仇富”的影子。但是其实矛头不应该对准丁真，他不过就是一个淳朴的放牛娃罢了，文盲的问题更不应该苛责他，而是去质问当地主管教育部门的官员。真正应该思考的是，为什么？为什么他一个文盲就都能火起来，靠脸吗？</p><img src="/2020/12/04/%E5%86%99%E5%9C%A8%E4%B8%AD%E5%9B%BD%E5%AE%AA%E6%B3%95%E6%97%A5/%E4%B8%81%E7%9C%9F%E9%9C%B8%E5%8D%A0%E7%83%AD%E6%90%9C.jpg" class="" title="不只是他，他的家人也火了" alt="丁真霸占热搜"><p>不幸的是，是的，就是靠脸。这几年，娱乐界的明星门槛日益降低，从老一辈艺术家德艺双馨，到流行歌手作词作曲，他们的成功，虽然可能容易一些，但都付出了自己的努力。无论是学习乐理，声乐，还是自己作词作曲，我们都可以说成是努力带来的回报，他们所有的获得都可勉强放置在“劳有所得”这一大框架下。然而从杨超越开始，这一切都变了。无需任何努力仅凭一张脸就可以成立自己公司，作为“特殊人才”落户上海。也许是尝到甜头后更加变本加厉，这一次更加简单粗暴。把一个文盲摆在台前，狠狠地打一打你们这些“读书改变命运”的人的脸。我和我的小伙伴们小时候的理想都是军人，警察，科学家，如果我的孩子说出：“我不读书，我要当网红！”，那是多么可怕的场景！</p><p>每当我谈起这个问题的时候，她的回答都是“人家可不是什么都没干，人家可是国企员工。”这么一看，我突然觉得我的舍友非常可笑，可悲。他为了拿到一个家乡国企的岗位，每天四处奔波，在贵州和北京之间不断往返，顶着干眼症，圆锥角膜的风险努力复习。更忘不了他提到“这个岗位报名有700多，简历筛选完只有40个人进笔试”时的那一抹庆幸。是啊，读书有什么用呢？读了10多年书之后仅仅是得到了和700个人竞争同一岗位的资格，而别人仅凭一张脸就能取得。几年前我们还在嘲笑日本小学生的梦想时是成为野兽先辈那样的人，现如今我们的下一代竟然也要陷入同样的境地。</p><p>对此，我女朋友的回答是“命”，丁真命中注定富贵。我难以想象这是一个正在备考考研政治的人能说出来的话。马克思说过，“阶级决定个人命运”，丁真是什么阶级，这是他的命运吗？改变他命运的当然不成冥冥之中的天命，而是背后的资本。古人云：“时来天地皆同力，运去英雄不自由。”这首诗的当今版本是“资来天地皆同力，资去英雄不自由”，资本可以随时随地地捧红一个人，也可以随时随地踩死一个人。</p><p>如今，国家为丁真站台，天地同力，我也不敢逆天而行发表什么意见。只是，当资本越来越为所欲为，试探底线的时候，是否应该警惕呢？从“东林书院”到“湖畔大学”；从敬新磨到杨超越；从包身工到996。以史为鉴，可以知兴替，望诸君不要放弃理想。</p><p>では、諸君は。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;他从996的公司下班骑着ofo回到了蛋壳租的公寓看杨超越丁真——CyberPunk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;今天是12月4日，中国宪法日。同时也是香风智乃的生日，虽然宪法离我非常遥远，我也不看点兔，但今天着实也是于我而言重要的一天。在这一天，我持续三年的初恋正式宣告终结。现在找点空位在这里倒垃圾，顺便键政一下。&lt;br&gt;就结果而言，人的感情其实相当脆弱，三年的感情也可能在短短几小时内毁于一旦。常言道：“知人知面不知心”，人的价值观远远不是短短三年就能看清的。既然已经结束，我也不想发表什么言论，骂她啊啥的不过是幼稚的行为，根本上她也只是受害者，今天是想来谈谈事情的前因后果以及对时事的一些思考。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="杂谈" scheme="https://blog.gaojianli.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个短网址系统</title>
    <link href="https://blog.gaojianli.me/2020/10/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%9F%AD%E7%BD%91%E5%9D%80%E7%B3%BB%E7%BB%9F/"/>
    <id>https://blog.gaojianli.me/2020/10/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%9F%AD%E7%BD%91%E5%9D%80%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-10-23T02:55:22.000Z</published>
    <updated>2020-12-10T18:22:25.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起"><a href="#起" class="headerlink" title="起"></a>起</h1><p>前阵子，在Xice的推荐下，我入手了一个3位<code>.eu</code>域名<code>u2b.eu</code>。他作为一个老羊毛党了，给我推荐的域名价格自然也十分离谱，<a href="https://www.icdsoft.com/en/domains" target="_blank" rel="noopener">10年只要20刀</a>，反过来看看我正在使用的<code>gaojianli.me</code>，一年12刀的价格完美阐释了什么叫做没有对比就没有伤害。</p><blockquote><p>值得注意的是，<code>.eu</code>的域名要求欧盟（前）成员国居民的身份才能注册，因此一开始想当然拿了美国人身份注册的我险些打水漂，所幸最后通过一张PS的燃气账单侥幸蒙混过去，可谓是十分惊险。</p></blockquote><p>虽然如此，作为冲动消费捡垃圾的典型，拿下了这个域名其实也不知道做什么。<strong>虽然不知道有什么用，但是太便宜了先买了吧。</strong>抱着这种思想我没少买奇奇怪怪的玩意儿，而这个三位的域名看起来也是这样一个“鸡肋”。说有用吧，虽然是3位域名，但是为了追求3位导致了其基本就是随机的字符串，含义不明；说没用那毕竟还是个3位的顶级域名，<del>还能谐音碰瓷Youtube</del>。</p><p>在闲置了一阵子之后，姑且想到了一个用途，你不是短吗？那就来做个短网址系统吧！</p><a id="more"></a><h1 id="承"><a href="#承" class="headerlink" title="承"></a>承</h1><p>在我印象中，短网址这种烂大街的东西有不少的开源实现，但是最近闲的也是闲的，与其用别人的，不如自己来造个轮子吧。</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>首先来规划一下项目，难得能自己做个东西，便想用尽可能用一些新技术，因此没有选择劳模Node.js，而是打算尝鲜下微软的<code>ASP .NET Core</code>，这东西据说能完美跨平台运行在Linux上，满足我的需求不是问题。</p><p>因为要考虑到一个封装成API的可能，因此一定是前后端分离的架构。前端最初的时候是想尝试一下<a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/views/razor?view=aspnetcore-3.1" target="_blank" rel="noopener">Razor</a>的，C#编译成wasm的方式还挺新颖的。但是写了2行就发现这东西是巨坑，因为它是！基！于！Bootstrap的！！这是多少年前的UI库了，组件全部用CSS来描述，写得十分痛苦和不便，果然火不起来是有理由的，还是老老实实Vue.js吧。</p><p>在做这个的时候，恰逢Vue 3.X 出世，也本想尝试一下<a href="https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api" target="_blank" rel="noopener">Composition API</a>配合<a href="https://github.com/vitejs/vite" target="_blank" rel="noopener">Vite</a>体验一把抛弃Webpack的感觉，<strong>然而</strong>，当我兴致冲冲搭建好了脚手架之后遇到了一个更严重问题：<strong>没有组件库</strong>。这连BootStrap都没有，更凄惨了！<del>写CSS是不可能写CSS的，这辈子也不可能手写的。</del> 最后，还是选择了劳模组合Vue2+Vuetify，也算是一大缺憾。</p><p>在架构之前还是了解了一下网上的常见方案，在现有方案中有人提出了一些建议：</p><blockquote><p>看了楼主代码.没上缓存(热点 url),没处理同一 url 连续两次转换出现不同结果的情况</p></blockquote><p>对于上面的意见，分开来探讨一下吧：</p><ul><li>对于意见2，目前很多现存的短网址都不支持这种功能（例如<code>goo.gl</code>），其理由也非常简单：不同的用户每次提交的URL都是一次不同的业务，如果合并了难以完成统计，撤销等功能。同时还给添加徒增工作量，每次添加时都会进行一次全表查询，纵有索引也会极大地浪费性能。</li><li>对于意见1，我的意见是请了解一下<a href="https://baike.baidu.com/item/%E8%BF%87%E6%97%A9%E4%BC%98%E5%8C%96/23734966?fr=aladdin" target="_blank" rel="noopener">这个</a>。现如今，是个项目就无脑上集群、Redis，完全不顾是否真的有这个需求，私以为也是一种提前优化。对于单用户来说，由于短链接跳转使用的是HTTP 301 永久性转移(Permanently Moved)，第二次访问时会直接被浏览器所缓存；对于多用户来说，热点URL的概率同时被数百人访问的概率也非常低（每个人只需访问一次），更多的访问是离散的，增加Redis也不能增加太多性能。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因此，总结一下所选解决方案如下：</p><table><thead><tr><th align="left">分类</th><th align="left">解决方案</th></tr></thead><tbody><tr><td align="left">后端</td><td align="left">ASP .NET Core</td></tr><tr><td align="left">数据库</td><td align="left">MySQL</td></tr><tr><td align="left">前端</td><td align="left">Vue.js</td></tr><tr><td align="left">组件库</td><td align="left"><a href="https://vuetifyjs.com/" target="_blank" rel="noopener">Vuetify</a></td></tr><tr><td align="left">缓存</td><td align="left">无</td></tr></tbody></table><h1 id="转"><a href="#转" class="headerlink" title="转"></a>转</h1><h2 id="新时代的ASP初体验"><a href="#新时代的ASP初体验" class="headerlink" title="新时代的ASP初体验"></a>新时代的ASP初体验</h2><p>既然冒着踩坑的风险选择了<br>长久以来，提到ASP我想到的都是一众<code>.asp</code>、<code>.aspx</code>结尾的网站，广泛分布在各大机关单位学校中，伴随着的关键词还有：卡，慢，IE6，<del>大马</del>等,，但是在实际开发中微软着实给我了一个惊喜，非复吴下阿软矣。</p><p>在实际的开发体验中，ASP.NET开发体验比我预想中的好得多，得益于宇宙第一IDE的加持，代码模板非常齐全，可以直接<code>Controller</code>为单位新建代码，以<code>Controller</code>的前缀命名的路由避免了写一大坨<code>router.js</code>，通过<code>Attribute</code>的传参更是免去了一大堆类似<code>var a=request.body.a</code>这种提取参数的代码。</p><p>从设计模式上来说，数据库的访问应该与<code>Controller</code>分离，实现封装、解耦。但是得益于LINQ的强大威力，数据库的访问被压缩到了一行语句，考虑到本项目复杂度，此时再进行封装反而有过度设计的嫌疑了，因此直接LINQ写到<code>Controller</code>里算了。如下是实现短网址跳转的代码，可见不论是查询数据库还是中URL中传参都是十分简洁的：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="meta-string">"&#123;shorten&#125;"</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Forward</span>(<span class="params"><span class="keyword">string</span> shorten, [FromServices] UrlContext dbContext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> longUrl = <span class="keyword">from</span> urls <span class="keyword">in</span> dbContext.Urls</span><br><span class="line">                    <span class="keyword">where</span> urls.shortUrl == shorten</span><br><span class="line">                    <span class="keyword">select</span> urls.longUrl;</span><br><span class="line">    <span class="keyword">if</span> (longUrl.Count() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Response.Redirect(Configuration.GetSection(<span class="string">"SiteSettings"</span>)[<span class="string">"homePage"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Response.Redirect(longUrl.Single());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总而言之，ASP.NET Core我相当看好，尽管是微软的技术所以前景不容乐观，各位开发者还是学习Java前途更加光明。但是作为简单的项目来说其比Koa完善，同时配置比Java的Spring方便（不用写XML真是人间之鉴），Nuget还能直接高速访问不用代理，好处真是太多了。我花了2天时间通过自己摸索+VS的自动提示便基本熟悉了此框架并完成了此项目（有够简单就是了），换做是Spring上手应该很难这么快的吧。</p><h2 id="短网址Hash算法"><a href="#短网址Hash算法" class="headerlink" title="短网址Hash算法"></a>短网址Hash算法</h2><p>关于这个网上也有很多讨论了，我对比后选择了“62进制法”。其核心是将长网址存入数据库后获得一个id，将id从10进制转换为62进制字符串，再加上一些随机字符串防止碰撞，最后得到缩短后的地址。</p><p>由于我直接将id设置为MySQL里的自增字段，因此连随机字符串都不需要了，直接把id拿来用就行了，反正也不存在碰撞的可能。进制转换代码是我从网上抄的Java代码改写的，<s>众所周知C#曾经有个名字叫J++</s>：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] alphaBet = &#123; <span class="string">'q'</span>, <span class="string">'w'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'t'</span>, <span class="string">'y'</span>, <span class="string">'u'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'z'</span>, <span class="string">'x'</span>, <span class="string">'c'</span>, <span class="string">'v'</span>, <span class="string">'b'</span>, <span class="string">'n'</span>, <span class="string">'m'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'Q'</span>, <span class="string">'W'</span>, <span class="string">'E'</span>, <span class="string">'R'</span>, <span class="string">'T'</span>, <span class="string">'Y'</span>, <span class="string">'U'</span>, <span class="string">'I'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'A'</span>, <span class="string">'S'</span>, <span class="string">'D'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'Z'</span>, <span class="string">'X'</span>, <span class="string">'C'</span>, <span class="string">'V'</span>, <span class="string">'B'</span>, <span class="string">'N'</span>, <span class="string">'M'</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">getShorted</span>(<span class="params"><span class="keyword">long</span> id</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rest = id;</span><br><span class="line">    Stack&lt;<span class="keyword">char</span>&gt; stack = <span class="keyword">new</span> Stack&lt;<span class="keyword">char</span>&gt;();</span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (rest != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        stack.Push(alphaBet[rest - (rest / <span class="number">62</span>) * <span class="number">62</span>]);</span><br><span class="line">        rest = rest / <span class="number">62</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; stack.Count() != <span class="number">0</span>;)</span><br><span class="line">    &#123;</span><br><span class="line">        result.Append(stack.Pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="合"><a href="#合" class="headerlink" title="合"></a>合</h1><p>至于前端部分就是普普通通的Vue.js应用，没什么好说的。写完之后编译、部署一气呵成，成果如下，欢迎体验：</p><ul><li>前端页面： <a href="https://short.u2b.eu" target="_blank" rel="noopener">https://short.u2b.eu</a></li><li>缩短网址格式：<code>https://u2b.eu/{short}</code> ，例如 <a href="https://u2b.eu/i" target="_blank" rel="noopener">https://u2b.eu/i</a> 对应 <a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></li></ul><p>值得注意的是Debian 10源中的<code>Mariadb</code>是链接<code>yaSSL</code>编译的，不支持TLS1.2及以上版本，在.NET Core 3.0以上版本的runtime上会报错，其解决方法是安装<code>Mariadb</code>官方源中的版本，其使用OpenSSL编译可以正常支持TLS1.2。</p><p>では、諸君は。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="项目源代码"><a href="#项目源代码" class="headerlink" title="项目源代码"></a>项目源代码</h2><ul><li>后端：<a href="https://github.com/Gaojianli/UrlShorter" target="_blank" rel="noopener">https://github.com/Gaojianli/UrlShorter</a></li><li>前端：<a href="https://github.com/Gaojianli/UrlShorter-web" target="_blank" rel="noopener">https://github.com/Gaojianli/UrlShorter-web</a></li></ul><h2 id="Codespaces"><a href="#Codespaces" class="headerlink" title="Codespaces"></a>Codespaces</h2><p>由于偷懒，本文没有使用常规的VSCode写作，而是直接使用了Github的在线VSCode：<a href="https://github.com/features/codespaces/" target="_blank" rel="noopener">Codespaces</a>，虽然很早我就排到了Codespaces的使用权，但是实际使用这是第一次，这里就顺便谈谈感想。</p><p>先说优点吧，其本质上是一个Ubuntu 18.04的容器，分配了1c4g的资源，里面运行了<code>vscode remote server</code>，然后浏览器远程连接之。好处是可以不用克隆代码和折腾Git，随到随写，哪怕是iPad也可以随时随地编程。</p><p><strong>但是</strong>，理想很美好，现实很骨感，实际体验那叫一个差。后悔，总之就是非常后悔，除了随时随地的掉线（2秒掉一次）外，延迟也难以忍受。输入可能有优化和提前渲染，输入的时候完全体会不到延迟，但是一旦要编辑那就是噩梦。<strong>每次退格键</strong>都要触发一次服务器通讯，大概延迟在2s左右，在这等待期间如果你移动了光标，不好意思，你的删除内容会马上跳转到现光标所在位置上，导致意外删除。换言之，你的所有操作并不是按顺序进入队列中，而是按照js的微任务执行顺序来操作。好家伙，同步的文本编辑任务在它这里变成异步了，因此每当网络波动你就不得不停下来，等待操作执行完毕，以免发生意外操作。</p><p>关于这个功能，我觉得要么是大陆网络的问题，要么就只是个体验版，白嫖要什么自行车。猜想Github实际设计应该是让企业self hosted，然后再在内网中使用吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;起&quot;&gt;&lt;a href=&quot;#起&quot; class=&quot;headerlink&quot; title=&quot;起&quot;&gt;&lt;/a&gt;起&lt;/h1&gt;&lt;p&gt;前阵子，在Xice的推荐下，我入手了一个3位&lt;code&gt;.eu&lt;/code&gt;域名&lt;code&gt;u2b.eu&lt;/code&gt;。他作为一个老羊毛党了，给我推荐的域名价格自然也十分离谱，&lt;a href=&quot;https://www.icdsoft.com/en/domains&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;10年只要20刀&lt;/a&gt;，反过来看看我正在使用的&lt;code&gt;gaojianli.me&lt;/code&gt;，一年12刀的价格完美阐释了什么叫做没有对比就没有伤害。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;值得注意的是，&lt;code&gt;.eu&lt;/code&gt;的域名要求欧盟（前）成员国居民的身份才能注册，因此一开始想当然拿了美国人身份注册的我险些打水漂，所幸最后通过一张PS的燃气账单侥幸蒙混过去，可谓是十分惊险。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然如此，作为冲动消费捡垃圾的典型，拿下了这个域名其实也不知道做什么。&lt;strong&gt;虽然不知道有什么用，但是太便宜了先买了吧。&lt;/strong&gt;抱着这种思想我没少买奇奇怪怪的玩意儿，而这个三位的域名看起来也是这样一个“鸡肋”。说有用吧，虽然是3位域名，但是为了追求3位导致了其基本就是随机的字符串，含义不明；说没用那毕竟还是个3位的顶级域名，&lt;del&gt;还能谐音碰瓷Youtube&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;在闲置了一阵子之后，姑且想到了一个用途，你不是短吗？那就来做个短网址系统吧！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="短网址" scheme="https://blog.gaojianli.me/tags/%E7%9F%AD%E7%BD%91%E5%9D%80/"/>
    
      <category term="域名" scheme="https://blog.gaojianli.me/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>艰难的博客找回过程</title>
    <link href="https://blog.gaojianli.me/2020/06/22/%E8%89%B0%E9%9A%BE%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%89%BE%E5%9B%9E%E8%BF%87%E7%A8%8B/"/>
    <id>https://blog.gaojianli.me/2020/06/22/%E8%89%B0%E9%9A%BE%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%89%BE%E5%9B%9E%E8%BF%87%E7%A8%8B/</id>
    <published>2020-06-22T18:26:35.000Z</published>
    <updated>2020-12-10T18:22:25.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>一直以来，我的博客都是通过hexo本地生成，生成文件上传Github，服务器pull的方式进行部署的。这么久都没遇到什么太大的问题，博客的相关源代码也都放在了我的文档里。然在2019年10月的时候，我的Surface Book出现了屏幕和底座接触不良的情况，USB和键盘经常失去响应。考虑到保修即将在12月份失效，因此选择了送修。</p><a id="more"></a><p>在备份数据的时候，我精心备份了所有的游戏，照片和代码，却唯独跳过了“我的文档”。感谢QQ等软件把自己的数据放到我的文档里面（日你大坝），给我留下了“我的文档就是个存放软件数据的目录，没什么无关紧要的东西”这种错误印象。“<strong>不会真的有人把文档放到我的文档吧？不会吧，不会吧？</strong>”我这么想着，在仔细观察了一下我的文档的目录后只备份了一些游戏的存档后就送修了。</p><p>然而，事实证明真的有人把东西放到“我的文档”，而且这个人就是我。天知道我在哪天整理文件的时候鬼迷心窍地把博客的源代码放到了“我的文档”。对于巨硬这种公司来说，送修自然意味着数据丢失。事实上我不但丢失了所有数据，连原有的划痕都被一并“修复”了，很大概率巨硬是直接给我换了一台设备，找回数据就是做梦。（另外本次送修还导致我更换了ssh私钥，错过了某加密货币的drop，直接损失</p><p>说来惭愧，在送修之后我就再也没有抽出时间写博客，因此我竟然没有第一时间发现这一事情。直到今年2月在Telegram和群友吹b的时候突然想起来，才突然发现自己的博客已经GG了。由于重新整理非常费时费力，因此直到这几天才腾出时间来整理。</p><h1 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h1><p>为了避免重蹈覆辙，最好的方法就是直接把源代码传到Git上，正好Github Action发布后还没用过（一直以来都在用Gitlab pipeline)，就来试试用Github Action来部署吧。 </p><p>首先生成一个Deply key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;823805669hehe@gmail.com&quot;</span><br></pre></td></tr></table></figure><p>对于这种需求，当然不是只有我一个人，大家都喜欢薅微软的羊毛，这里已经有一个库了<a href="https://github.com/sma11black/hexo-action" target="_blank" rel="noopener">sma11black/hexo-action</a><br>添加到相应的编译后仓库里，在源代码文件夹里面新增<code>action.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="comment"># workflow name</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="string">[push]</span> <span class="comment"># 触发事件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span> <span class="comment"># job1 id</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 运行环境为最新版 Ubuntu</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">A</span> <span class="string">job</span> <span class="string">to</span> <span class="string">deploy</span> <span class="string">blog.</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="comment"># step1 获取源码</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span> <span class="comment"># 使用 actions/checkout@v1</span></span><br><span class="line">      <span class="attr">with:</span> <span class="comment"># 条件</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span> <span class="comment"># Checkout private submodules(themes or something else). 当有子模块时切换分支？</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.) 缓存压缩 node_modules，不用每次下载，使用时解压，可以加快工作流的执行过程，超过 7 天没有使用将删除压缩包。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span> <span class="comment"># step2</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span> <span class="comment"># step3 name</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="string">!=</span> <span class="string">'true'</span> <span class="comment"># 如果变量 cache-hit 不等于 true</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 安装 node modules 相关依赖</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Deploy hexo blog website.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="comment"># step4</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">sma11black/hexo-action@v1.0.1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">user_name:</span> <span class="string">Gaojianli</span></span><br><span class="line">        <span class="attr">user_email:</span> <span class="string">823805669hehe@gmail.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">the</span> <span class="string">output</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">"$<span class="template-variable">&#123;&#123; steps.deploy.outputs.notify &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>接下来push上去看看效果吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: could not read Username for &#39;https:&#x2F;&#x2F;github.com&#39;: No such device or address</span><br></pre></td></tr></table></figure><p>???这是什么问题？检查再三,我也确认我的确填写了这一字段，最终我找到了这个<a href="https://github.com/sma11black/hexo-action/issues/5" target="_blank" rel="noopener">issue</a>，其大意大概就是得用SSH的方式登录，行吧。修改<code>_config.yml</code>如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:Gaojianli/gaojianli.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>再次push上去看看：<br><img src="success.png" alt="成功push"><br>成功！</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>我在<a href="/2019/05/11/Libuv%E5%88%9D%E6%8E%A2/" title="Libuv初探">Libuv初探</a>一文曾经写道：</p><blockquote><p>在生活中，有很多事情不是不能做，只是需要一个契机。有了这个契机，我就能有足够的动力去完成之。</p></blockquote><p>这次的博客丢失，也算是一次契机吧！第一次使用了Github Actions，同时也避免了数据的再次丢失，总的来说还是可喜可贺。接下来的就等一个Codespaces正式上线吧，以后连本地都不需要留存博客代码了，真正把hexo用成wordpress（笑）<br>では、諸君は。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;一直以来，我的博客都是通过hexo本地生成，生成文件上传Github，服务器pull的方式进行部署的。这么久都没遇到什么太大的问题，博客的相关源代码也都放在了我的文档里。然在2019年10月的时候，我的Surface Book出现了屏幕和底座接触不良的情况，USB和键盘经常失去响应。考虑到保修即将在12月份失效，因此选择了送修。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="博客" scheme="https://blog.gaojianli.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Libuv初探</title>
    <link href="https://blog.gaojianli.me/2019/05/11/Libuv%E5%88%9D%E6%8E%A2/"/>
    <id>https://blog.gaojianli.me/2019/05/11/Libuv%E5%88%9D%E6%8E%A2/</id>
    <published>2019-05-11T15:35:08.000Z</published>
    <updated>2020-12-10T18:22:25.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个Node.js玩家，<a href="http://libuv.org/" target="_blank" rel="noopener">libuv</a>的鼎鼎大名可谓是如雷贯耳。在我的印象中，libuv就是个“封装了ICOP/epoll等的超级牛逼的基于事件循环的库”，换句话说，就是“我知道你很牛逼，但是我啥都不知道”。<br>在生活中，有很多事情不是不能做，只是需要一个契机。有了这个契机，我就能有足够的动力去完成之。而我这学期的C++专业选修课大作业便给了我这个契机：</p><blockquote><p>题目三（10分）<br>在题目二的基础上，将游戏由本地单机，扩展为服务器多人游戏平台，使用客户端/服务器的方式，同一时间可以多人登录系统。将所有闯关者、出题者信息保存在服务器。<br>要求：</p><ul><li>必须在题目二基础上进行修改。</li><li>使用socket进行通信。</li><li>需要完成服务器端程序，以及客户端程序。客户端可以启动多个同时与服务器交互，要求服务器具有并发处理能力。</li></ul></blockquote><h1 id="从入门到放弃"><a href="#从入门到放弃" class="headerlink" title="从入门到放弃"></a>从入门到放弃</h1><p>其实一开始，我曾经被libuv吓退过，究其原因就是那一大堆<code>uv_</code>开头的指针，而代码写出来大概是这个画风：<br><a href="https://github.com/nikhilm/uvbook/blob/master/code/pipe-echo-server/main.c" target="_blank" rel="noopener">Echo-Server</a></p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;uv.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uv_loop_t</span> *loop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">uv_write_t</span> req;</span><br><span class="line">    <span class="keyword">uv_buf_t</span> buf;</span><br><span class="line">&#125; <span class="keyword">write_req_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_write_req</span><span class="params">(<span class="keyword">uv_write_t</span> *req)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">write_req_t</span> *wr = (<span class="keyword">write_req_t</span>*) req;</span><br><span class="line">    <span class="built_in">free</span>(wr-&gt;buf.base);</span><br><span class="line">    <span class="built_in">free</span>(wr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">alloc_buffer</span><span class="params">(<span class="keyword">uv_handle_t</span> *handle, <span class="keyword">size_t</span> suggested_size, <span class="keyword">uv_buf_t</span> *buf)</span> </span>&#123;</span><br><span class="line">  buf-&gt;base = <span class="built_in">malloc</span>(suggested_size);</span><br><span class="line">  buf-&gt;len = suggested_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">echo_write</span><span class="params">(<span class="keyword">uv_write_t</span> *req, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Write error %s\n"</span>, uv_err_name(status));</span><br><span class="line">    &#125;</span><br><span class="line">    free_write_req(req);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">echo_read</span><span class="params">(<span class="keyword">uv_stream_t</span> *client, <span class="keyword">ssize_t</span> nread, <span class="keyword">const</span> <span class="keyword">uv_buf_t</span> *buf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nread &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">write_req_t</span> *req = (<span class="keyword">write_req_t</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">write_req_t</span>));</span><br><span class="line">        req-&gt;buf = uv_buf_init(buf-&gt;base, nread);</span><br><span class="line">        uv_write((<span class="keyword">uv_write_t</span>*) req, client, &amp;req-&gt;buf, <span class="number">1</span>, echo_write);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nread &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nread != UV_EOF)</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Read error %s\n"</span>, uv_err_name(nread));</span><br><span class="line">        uv_close((<span class="keyword">uv_handle_t</span>*) client, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(buf-&gt;base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on_new_connection</span><span class="params">(<span class="keyword">uv_stream_t</span> *server, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// error!</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uv_pipe_t</span> *client = (<span class="keyword">uv_pipe_t</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">uv_pipe_t</span>));</span><br><span class="line">    uv_pipe_init(loop, client, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (uv_accept(server, (<span class="keyword">uv_stream_t</span>*) client) == <span class="number">0</span>) &#123;</span><br><span class="line">        uv_read_start((<span class="keyword">uv_stream_t</span>*) client, alloc_buffer, echo_read);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        uv_close((<span class="keyword">uv_handle_t</span>*) client, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_sock</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uv_fs_t</span> req;</span><br><span class="line">    uv_fs_unlink(loop, &amp;req, <span class="string">"echo.sock"</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    loop = uv_default_loop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uv_pipe_t</span> server;</span><br><span class="line">    uv_pipe_init(loop, &amp;server, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    signal(SIGINT, remove_sock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">if</span> ((r = uv_pipe_bind(&amp;server, <span class="string">"echo.sock"</span>))) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Bind error %s\n"</span>, uv_err_name(r));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((r = uv_listen((<span class="keyword">uv_stream_t</span>*) &amp;server, <span class="number">128</span>, on_new_connection))) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Listen error %s\n"</span>, uv_err_name(r));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uv_run(loop, UV_RUN_DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这堆结构体是什么？？？光这一堆指针就足够劝退了吧！尤其是需要进行回调，还涉及到了各种函数指针，简直是恶心到不能再恶心了。不过这也没办法，谁叫人家只是个C语言库呢。</p><h2 id="绝处逢生"><a href="#绝处逢生" class="headerlink" title="绝处逢生"></a>绝处逢生</h2><p>幸而天无绝人之路，在关于<code>libuv</code>少的可怜的文档中，我发现了这个Wrapper:<a href="https://github.com/skypjack/uvw" target="_blank" rel="noopener">UVW</a></p><blockquote><p>uvw is a header-only, event based, tiny and easy to use libuv wrapper in modern C++.<br>The basic idea is to hide completely the C-ish interface of libuv behind a graceful C++ API. Currently, no uv_*_t data structure is actually exposed by the library.<br>Note that uvw stays true to the API of libuv and it doesn’t add anything to its interface. For the same reasons, users of the library must follow the same rules who are used to follow with libuv.<br>As an example, a handle should be initialized before any other operation and closed once it is no longer in use.</p></blockquote><p>字面意思，一个<code>header-only</code>的库，对<code>libuv</code>的C风格API进行了封装，并转换成了C++14的语法。看起来非常的香，但是吃起来就有些咯牙了——本来关于<code>libuv</code>的资料就非常之少，如果再使用了这个库的话，你能够获得的资料就更少了。<br>别无他法，只有按照它<code>doxygen</code>生成的文档结合它的单元测试一点点来啃了。<br>接下来我们的例子都来源于<a href="https://github.com/Gaojianli/Word-Clear/blob/master/Server/src/Server.cpp" target="_blank" rel="noopener">Server.cpp</a></p><h3 id="创建循环"><a href="#创建循环" class="headerlink" title="创建循环"></a>创建循环</h3><p>在使用任何基于事件循环的功能之前，你得先有一个循环才行。得益于良好的封装，创建循环变得非常的简单，仅仅需要短短的一行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> loop = uvw::Loop::getDefault();<span class="comment">//创建循环</span></span><br><span class="line">listen(*loop);<span class="comment">//绑定监听事件</span></span><br><span class="line">loop-&gt;run();<span class="comment">//运行循环</span></span><br></pre></td></tr></table></figure><h3 id="监听事件绑定"><a href="#监听事件绑定" class="headerlink" title="监听事件绑定"></a>监听事件绑定</h3><p>UVW将<code>libuv</code>中几乎所有的对象（结构体）都封装到了<code>loop</code>对象之中，取用只需要调用<code>loop::resource&lt;T&gt;()</code>即可。因为我们主要需要绑定的是针对<code>socket</code>的监听，所以首先我们要创建一个<code>TCPHandle</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;uvw::TCPHandle&gt; tcp = loop.resource&lt;uvw::TCPHandle&gt;();</span><br></pre></td></tr></table></figure><p>由于是整个过程是异步的，我们无法在适当的时候释放这个handle，因此必须使用智能指针shared_ptr进行托管。</p><p>创建好了Handle，就可以开始绑定事件了！但是在开始之前，要先提一个问题：还记得在Node.js里面是怎么绑定事件的吗?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">event.on(<span class="string">'someEvent'</span>, data =&gt;&#123;</span><br><span class="line">    <span class="comment">//do some thing</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述代码中<code>someEvent</code>是事件的名字，而第二个参数则是事件触发时将要执行的回调函数。有了这份基础，我们来理解<code>uvw</code>中的事件监听就非常容易了。<br>在UVW中，事件绑定主要有两种方法:<code>on</code>和<code>once</code>。前者就是普通的监听，后者除了只能触发一次之外，和前者并没有太大区别。<br><code>on</code>方法的原型长这样:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection&lt;E&gt; uvw::Emitter&lt; T &gt;::on (Listener&lt;E&gt; f)</span><br></pre></td></tr></table></figure><p>如果看不懂上面那一堆模板的话，可以直接看这个例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tcp-&gt;on&lt;uvw::ErrorEvent&gt;([](<span class="keyword">const</span> uvw::ErrorEvent &amp; event, uvw::TCPHandle&amp;) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error occurred:"</span> &lt;&lt; event.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，监听的事件是<code>uvw::ErrorEvent</code>，而后面那个lambda表达式就是所谓回调函数。这句话的功能就是在发生错误的时候打印出错误来。怎么样，和上面的Node.js是不是非常相似？顺带一提，这句话在Javascript中会这么写: <del>JS是万物之母!</del></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.on(<span class="string">"error"</span>,<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><h3 id="连接事件绑定"><a href="#连接事件绑定" class="headerlink" title="连接事件绑定"></a>连接事件绑定</h3><p>那么，现在我们已经知道了如何绑定事件，那么就疯狂来绑定吧：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">tcp-&gt;on&lt;uvw::ListenEvent&gt;([](<span class="keyword">const</span> uvw::ListenEvent&amp;, uvw::TCPHandle &amp; srv) &#123;<span class="comment">//监听事件，当客户端连接时会触发</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;uvw::TCPHandle&gt; client = srv.loop().resource&lt;uvw::TCPHandle&gt;();<span class="comment">//获取一个客户端的Handle</span></span><br><span class="line">srv.accept(*client);</span><br><span class="line">#ifdef DEBUG <span class="comment">//调试模式下显示客户端连接信息和断开信息</span></span><br><span class="line">uvw::Addr remote = client-&gt;peer();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">&lt;&lt; remote.ip &lt;&lt; <span class="string">":"</span> &lt;&lt; remote.port &lt;&lt; <span class="string">" Connected"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">client-&gt;on&lt;uvw::CloseEvent&gt;([remote](<span class="keyword">const</span> uvw::CloseEvent&amp;, uvw::TCPHandle&amp;) &#123;<span class="comment">//连接关闭时触发的事件</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Connection from "</span> &lt;&lt; remote.ip &lt;&lt; <span class="string">" closed."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">&lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;);</span><br><span class="line">#endif <span class="comment">// DEBUG</span></span><br><span class="line">client-&gt;on&lt;uvw::EndEvent&gt;([](<span class="keyword">const</span> uvw::EndEvent&amp;, uvw::TCPHandle &amp; client) &#123;</span><br><span class="line">client.close();<span class="comment">//连接结束关闭连接</span></span><br><span class="line">&#125;);</span><br><span class="line">client-&gt;on&lt;uvw::ErrorEvent&gt;([](<span class="keyword">const</span> uvw::ErrorEvent &amp; event, uvw::TCPHandle &amp; client) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error occurred:"</span> &lt;&lt; event.what() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//错误监听</span></span><br><span class="line">client.close();</span><br><span class="line">&#125;);</span><br><span class="line">client-&gt;on&lt;uvw::DataEvent&gt;([](<span class="keyword">const</span> uvw::DataEvent &amp; event, uvw::TCPHandle &amp; client) &#123;<span class="comment">//接收到数据</span></span><br><span class="line"><span class="keyword">if</span> (event.length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">auto</span> temp = <span class="keyword">new</span> <span class="keyword">char</span>[event.length + <span class="number">1</span>];</span><br><span class="line">memcpy_s(temp, event.length, event.data.get(), event.length);</span><br><span class="line">temp[event.length] = <span class="string">'\0'</span>;<span class="comment">//向数据流尾部追加\0使之被截断为字符串</span></span><br><span class="line"><span class="keyword">auto</span> response = handler::mainHandler(temp, client);<span class="comment">//移交请求给业务代码</span></span><br><span class="line"><span class="keyword">auto</span> toWrite = <span class="keyword">new</span> <span class="keyword">char</span>[response.size()];</span><br><span class="line">memcpy_s(toWrite, response.size(), response.c_str(), response.size());</span><br><span class="line">client.tryWrite(toWrite, (<span class="keyword">unsigned</span>)response.size());<span class="comment">//copy后写回Client</span></span><br><span class="line"><span class="keyword">delete</span>[] toWrite;</span><br><span class="line"><span class="keyword">delete</span>[] temp;</span><br><span class="line">&#125;);</span><br><span class="line">client-&gt;read();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述的<code>DataEvent</code>也和Node.js中的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">readerStream.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">   data += chunk;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>非常相似，毕竟socket本质上也是文件描述符。总而言之，通过UVW我们便可将不熟悉的C++开发变成我们熟悉的Node后端开发，所谓“知己知彼百战不殆”，若不知彼将其化为知的“彼”即可。</p><h3 id="绑定端口"><a href="#绑定端口" class="headerlink" title="绑定端口"></a>绑定端口</h3><p>当然，前面我们只是绑定好了相应的事件，还差最后一点微小的工作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp-&gt;bind&lt;uvw::IPv6&gt;(<span class="string">"[::]"</span>, port);<span class="comment">//监听0.0.0.0:port和[::]:port</span></span><br><span class="line">tcp-&gt;listen();</span><br></pre></td></tr></table></figure><p>值得注意的是：不同于Nginx，在libuv中监听IPv6端口即可同时完成对IPv4和IPv6的双栈监听，若要IPv6 Only还需要显式加入<code>TCPHandle::Bind::IPV6ONLY</code>的Flag。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本文所有代码可以在这里下载：<a href="https://github.com/Gaojianli/Word-Clear" target="_blank" rel="noopener">https://github.com/Gaojianli/Word-Clear</a><br>事实证明，纵使是<code>libuv</code>这种库也并不是什么洪水猛兽。令和元年，站在巨人的肩膀上的我们面前，面前并不存在什么完全无法跨越的高峰，<strong>需要的仅仅是个契机</strong>。而所谓契机，在我看来仅仅是个打破自己惰性的借口罢了。<del>自己主动研究是不可能研究的，只有布置了作业才能去看看这样子</del><br>今日写在这里，引以为鉴。<br>では、諸君は。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;作为一个Node.js玩家，&lt;a href=&quot;http://libuv.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;libuv&lt;/a&gt;的鼎鼎大名可谓是如雷贯耳。在我的印象中，libuv就是个“封装了ICOP/epoll等的超级牛逼的基于事件循环的库”，换句话说，就是“我知道你很牛逼，但是我啥都不知道”。&lt;br&gt;在生活中，有很多事情不是不能做，只是需要一个契机。有了这个契机，我就能有足够的动力去完成之。而我这学期的C++专业选修课大作业便给了我这个契机：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目三（10分）&lt;br&gt;在题目二的基础上，将游戏由本地单机，扩展为服务器多人游戏平台，使用客户端/服务器的方式，同一时间可以多人登录系统。将所有闯关者、出题者信息保存在服务器。&lt;br&gt;要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须在题目二基础上进行修改。&lt;/li&gt;
&lt;li&gt;使用socket进行通信。&lt;/li&gt;
&lt;li&gt;需要完成服务器端程序，以及客户端程序。客户端可以启动多个同时与服务器交互，要求服务器具有并发处理能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;从入门到放弃&quot;&gt;&lt;a href=&quot;#从入门到放弃&quot; class=&quot;headerlink&quot; title=&quot;从入门到放弃&quot;&gt;&lt;/a&gt;从入门到放弃&lt;/h1&gt;&lt;p&gt;其实一开始，我曾经被libuv吓退过，究其原因就是那一大堆&lt;code&gt;uv_&lt;/code&gt;开头的指针，而代码写出来大概是这个画风：&lt;br&gt;&lt;a href=&quot;https://github.com/nikhilm/uvbook/blob/master/code/pipe-echo-server/main.c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Echo-Server&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="编程" scheme="https://blog.gaojianli.me/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C/C++" scheme="https://blog.gaojianli.me/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>即日起本站域名切换到gaojianli.me</title>
    <link href="https://blog.gaojianli.me/2018/10/15/%E5%8D%B3%E6%97%A5%E8%B5%B7%E6%9C%AC%E7%AB%99%E5%9F%9F%E5%90%8D%E5%88%87%E6%8D%A2%E5%88%B0gaojianli-me/"/>
    <id>https://blog.gaojianli.me/2018/10/15/%E5%8D%B3%E6%97%A5%E8%B5%B7%E6%9C%AC%E7%AB%99%E5%9F%9F%E5%90%8D%E5%88%87%E6%8D%A2%E5%88%B0gaojianli-me/</id>
    <published>2018-10-15T20:31:25.000Z</published>
    <updated>2020-12-10T18:22:25.031Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来，我都使用的是<a href="http://www.freenom.com/" target="_blank" rel="noopener">Freenom</a>提供的<code>.tk</code>免费域名，由于功能齐全且续费免费，自然是我区区一个穷学生的首选。虽然一直有小伙伴劝我切换到一个收费域名，而且烈士墙上被无故收走域名惨案的比比皆是。但我由于个人懒惰，在加上<strong>又不是不能用</strong>的人生信条，一直就用了下来。<br>但是就在前不久，<a href="https://blog.xice.wang/2018/10/23/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%97%9B%E5%A4%B1%E5%9F%9F%E5%90%8D%E7%9A%84%E7%BB%8F%E5%8E%86/" target="_blank" rel="noopener">潇</a>却经历了一次惨痛无比的域名回收事件，<code>Freenom</code>在没有任何征兆、事前通知的情况下删除了他的域名（xice.cf)，而再次注册已经提示要收费。而他的国内域名备案迟迟得不到批准，现阶段就连翻墙都存在困难。于我而言，这不啻前车之鉴。与其被黑心厂商突然收走域名，到时候再手忙脚乱地迁移，不如自己慢慢搬迁。而正好，Github的<a href="https://education.github.com/pack" target="_blank" rel="noopener">Student developer pack</a>包含了由<a href="https://nc.me/github/auth" target="_blank" rel="noopener">Namecheap</a>提供了免费的<code>.me</code>域名一年使用权，就打算先将就用着。因此现阶段不论是博客还是树莓派上的各种服务都会慢慢地搬迁，直至最终弃用<code>gaojianli.tk</code>这一不稳定要素。<br>では、諸君は。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直以来，我都使用的是&lt;a href=&quot;http://www.freenom.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Freenom&lt;/a&gt;提供的&lt;code&gt;.tk&lt;/code&gt;免费域名，由于功能齐全且续费免费，自然是我区区一个穷学生的首选
      
    
    </summary>
    
    
    
      <category term="博客" scheme="https://blog.gaojianli.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>树莓派添加温控风扇（二）</title>
    <link href="https://blog.gaojianli.me/2018/09/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%B7%BB%E5%8A%A0%E6%B8%A9%E6%8E%A7%E9%A3%8E%E6%89%87%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://blog.gaojianli.me/2018/09/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%B7%BB%E5%8A%A0%E6%B8%A9%E6%8E%A7%E9%A3%8E%E6%89%87%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2018-09-16T17:07:58.000Z</published>
    <updated>2020-12-10T18:22:25.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><a href="/2018/09/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%B7%BB%E5%8A%A0%E6%B8%A9%E6%8E%A7%E9%A3%8E%E6%89%87%EF%BC%88%E4%B8%80%EF%BC%89/" title="上回">上回</a>说到，对于arm64的系统来说，目前并没有一个库可以支持对GPIO的调用。那么接下来摆在我面前的就三条路：<ol><li>修改setup.c，让cpuinfo中包含相应的Hardware信息，随后重新编译内核</li><li>修改wiringPi源码</li><li>放弃使用库</li></ol><h1 id="可行的方法"><a href="#可行的方法" class="headerlink" title="可行的方法"></a>可行的方法</h1><p>上面三个选项中，1和2显然是极其不现实的，因此我决定采用第三条路。在之前那个<a href="https://github.com/bamarni/pi64/issues/35" target="_blank" rel="noopener">issue</a>中，我看到了这样一种用法：</p><a id="more"></a><blockquote><p>At least as root GPIO works in bash on low level:<br>echo “23” &gt; /sys/class/gpio/export<br>echo “out” &gt; /sys/class/gpio/gpio23/direction<br>echo “1” &gt; /sys/class/gpio/gpio23/value<br>…<br>and can be verified by LED.</p></blockquote><p>根据网上的资料，<code>/sys/class/gpio</code>是linux通用的GPIO控制方法，看样子是好好地贯彻了Unix“一切皆文件”的思想。那么接下来简单地测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># root @ rasp in &#x2F;sys&#x2F;class&#x2F;gpio [19:07:22]</span><br><span class="line">$ echo 18&gt;export</span><br><span class="line"></span><br><span class="line"># root @ rasp in &#x2F;sys&#x2F;class&#x2F;gpio [19:07:33]</span><br><span class="line">$ ls</span><br><span class="line">export  gpio18  gpiochip0  gpiochip100  gpiochip128  unexport</span><br></pre></td></tr></table></figure><p>可以看到系统自动生成了相关的GPIO目录，进入之后可以看到相关的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># root @ rasp in &#x2F;sys&#x2F;class&#x2F;gpio&#x2F;gpio18 [19:10:36]</span><br><span class="line">$ ls</span><br><span class="line">active_low  device  direction  edge  power  subsystem  uevent  value</span><br></pre></td></tr></table></figure><p>相关的命名还是非常简单直观的，向<code>direction</code>中写入信息控制GPIO的输入输出方向，<code>value</code>则控制的是输出值，那么就拿我们先前选定的18号针脚来测试一下吧:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># root @ rasp in &#x2F;sys&#x2F;class&#x2F;gpio&#x2F;gpio18 [19:11:31]</span><br><span class="line">$ echo out&gt;direction</span><br><span class="line"></span><br><span class="line"># root @ rasp in &#x2F;sys&#x2F;class&#x2F;gpio&#x2F;gpio18 [19:14:50]</span><br><span class="line">$ echo &quot;1&quot;&gt;value</span><br></pre></td></tr></table></figure><p>接下来用万用表检测<br><img src="volate_check.jpg" alt="万用表检测电压"><br>3.28v，确实是1，取消输出不知道为什么向<code>value</code>写入0并不管用，因此只有直接向<code>unexport</code>写入端口号:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># root @ rasp in &#x2F;sys&#x2F;class&#x2F;gpio [19:29:18]</span><br><span class="line">$ echo 18&gt;unexport</span><br><span class="line"></span><br><span class="line"># root @ rasp in &#x2F;sys&#x2F;class&#x2F;gpio [19:29:22]</span><br><span class="line">$ ls</span><br><span class="line">export  gpiochip0  gpiochip100  gpiochip128  unexport</span><br></pre></td></tr></table></figure><p>可以看到相关的目录自动被移除了，电压也变成了0</p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>实际上逻辑并不复杂，但是要考虑到程序退出之后风扇依旧会旋转，因此要做好信号的捕捉：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEMP_PATH <span class="meta-string">"/sys/class/thermal/thermal_zone0/temp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_PIN 18</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">bool</span> status = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">char</span> *timenow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">getTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">free</span>(timenow);</span><br><span class="line">timenow = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(<span class="number">40</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">time_t</span> rawtime;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">timeinfo</span>;</span></span><br><span class="line">time(&amp;rawtime);</span><br><span class="line">timeinfo = localtime(&amp;rawtime);</span><br><span class="line">*timenow = <span class="string">'['</span>;</span><br><span class="line"><span class="built_in">strcat</span>(timenow, asctime(timeinfo));</span><br><span class="line">timenow[<span class="built_in">strlen</span>(timenow) - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">strcat</span>(timenow, <span class="string">"] "</span>);</span><br><span class="line"><span class="keyword">return</span> timenow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHigh</span><span class="params">(<span class="keyword">int</span> gpio_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str1 = <span class="string">"echo "</span>;</span><br><span class="line"><span class="built_in">string</span> str2 = <span class="string">"&gt; /sys/class/gpio"</span>;</span><br><span class="line">system((str1 + to_string(gpio_num) + str2 + <span class="string">"/export"</span>).c_str());</span><br><span class="line">system((str1 + <span class="string">"high"</span> + str2 + <span class="string">"/gpio"</span> + to_string(gpio_num) + <span class="string">"/direction"</span>).c_str());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" Fan started.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeGPIO</span><span class="params">(<span class="keyword">int</span> gpio_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str1 = <span class="string">"echo "</span>;</span><br><span class="line"><span class="built_in">string</span> str2 = <span class="string">"&gt; /sys/class/gpio"</span>;</span><br><span class="line">system((str1 + to_string(gpio_num) + str2 + <span class="string">"/unexport"</span>).c_str());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" Fan stopped.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigroutine</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sig == SIGINT)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%sGet SIGINT, quiting..."</span>, getTime());</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sig == SIGTERM)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%sGet SIGTERM, quiting..."</span>, getTime());</span><br><span class="line"><span class="keyword">if</span> (status)</span><br><span class="line">removeGPIO(GPIO_PIN);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">signal(SIGINT, sigroutine);</span><br><span class="line">signal(SIGTERM, sigroutine);</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"stop"</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">removeGPIO(GPIO_PIN);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">float</span> temp;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp = getTemp();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%sTemperature is %.2f,"</span>, getTime(), temp);</span><br><span class="line"><span class="keyword">if</span> (temp &gt; <span class="number">50</span> &amp;&amp; status == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">setHigh(GPIO_PIN);</span><br><span class="line">status = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (temp &lt; <span class="number">45</span> &amp;&amp; status)</span><br><span class="line">&#123;</span><br><span class="line">removeGPIO(GPIO_PIN);</span><br><span class="line">status = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!status)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" nothing to do...\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" keep fan working...\n"</span>);</span><br><span class="line">sleep(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getTemp</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="keyword">float</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buf[MAX_SIZE];</span><br><span class="line">fd = <span class="built_in">open</span>(TEMP_PATH, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to open thermal_zone0/temp\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">read</span>(fd, buf, MAX_SIZE) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to read temp\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = atoi(buf) / <span class="number">1000.0</span>;</span><br><span class="line"><span class="built_in">close</span>(fd);</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请原谅我极其不优雅不简洁的实现方式和混乱的代码风格，毕竟有太久没碰过了。但是我要说的还是那句话：</p><blockquote class="blockquote-center"><p><span style="font-size:3em">又不是不能用</span></p></blockquote><h2 id="再次碰壁"><a href="#再次碰壁" class="headerlink" title="再次碰壁"></a>再次碰壁</h2><p>我按照上面的方法接入了风扇，随后echo……嗯，看起来一切正常，也没有报错什么的，除了风扇<strong>*纹丝不动</strong>以外。<br>纹丝不动……<br>纹丝不动……<br>不动……<br>动……<br>……<br>Why？为什么会变成这样呢……第一次有了能调用GPIO的方法。有了能控制风扇开关的代码。两件快乐事情重合在一起。而这两份快乐，又给我带来更多的快乐。得到的，本该是像梦境一般幸福的时间……但是，为什么，会变成这样呢……</p><h2 id="原因分析及解决方法"><a href="#原因分析及解决方法" class="headerlink" title="原因分析及解决方法"></a>原因分析及解决方法</h2><p>咳咳，请不要打我。其实仔细想想原因不难想到，GPIO是一种数字电路，而数字电路的电阻通常大得惊人，电流则是mA级别的，所能做的也仅仅就是点亮LED而已，想要让它驱动风扇实在是强人所难。因此不可避免地，我们就需要对电流进行放大。目前手头只有A42 A331的三极管，β值大约在320左右，勉强可以使用，就就地使用了。电路图大致如下（手残请忽略）：<br><img src="Sketch.png" alt="电路图"><br>基极连接GPIO并调至高电平之后，测得发射极和和集电极之间电压为4.66v，带动风扇应该没问题<br><img src="volate2.jpg" alt="发射极和集电极间电压"><br>接入风扇之后，风扇正常工作，至此，温控风扇连接完毕。</p><h2 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h2><p>写了一个程序，当然要做成自启动服务了，得益于<code>systemd</code>，编写系统服务变得非常简单，在<code>/etc/systemd/system</code>目录下新建一个<code>autofan.service</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Temperature controled fan daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">PIDFile&#x3D;&#x2F;var&#x2F;run&#x2F;autofan.pid</span><br><span class="line">User&#x3D;root</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;autoFan</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>随后运行<code>systemctl daemon-reload</code>重新加载服务，<code>systemctl start autofan.service</code>启动服务即可。</p><h1 id="后文"><a href="#后文" class="headerlink" title="后文"></a>后文</h1><p>虽然成功地实现了风扇的温度控制，但是文中的操控GPIO的方法实在太不优雅了，仅仅是个临时之策，无法大规模运用。当然，也不是没有将之封装成一个库的想法，但时目前并没有太多的需要以及动力，就先这样吧。<del>又不是不能用</del></p><blockquote class="blockquote-center"><p>不要重复造轮子<br>——忘了谁说的了</p></blockquote><p>では、諸君は。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;a href=&quot;/2018/09/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%B7%BB%E5%8A%A0%E6%B8%A9%E6%8E%A7%E9%A3%8E%E6%89%87%EF%BC%88%E4%B8%80%EF%BC%89/&quot; title=&quot;上回&quot;&gt;上回&lt;/a&gt;说到，对于arm64的系统来说，目前并没有一个库可以支持对GPIO的调用。那么接下来摆在我面前的就三条路：
&lt;ol&gt;
&lt;li&gt;修改setup.c，让cpuinfo中包含相应的Hardware信息，随后重新编译内核&lt;/li&gt;
&lt;li&gt;修改wiringPi源码&lt;/li&gt;
&lt;li&gt;放弃使用库&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;可行的方法&quot;&gt;&lt;a href=&quot;#可行的方法&quot; class=&quot;headerlink&quot; title=&quot;可行的方法&quot;&gt;&lt;/a&gt;可行的方法&lt;/h1&gt;&lt;p&gt;上面三个选项中，1和2显然是极其不现实的，因此我决定采用第三条路。在之前那个&lt;a href=&quot;https://github.com/bamarni/pi64/issues/35&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;issue&lt;/a&gt;中，我看到了这样一种用法：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="树莓派" scheme="https://blog.gaojianli.me/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派添加温控风扇（一）</title>
    <link href="https://blog.gaojianli.me/2018/09/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%B7%BB%E5%8A%A0%E6%B8%A9%E6%8E%A7%E9%A3%8E%E6%89%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://blog.gaojianli.me/2018/09/16/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%B7%BB%E5%8A%A0%E6%B8%A9%E6%8E%A7%E9%A3%8E%E6%89%87%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2018-09-16T14:17:32.000Z</published>
    <updated>2020-12-10T18:22:25.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前不久不知道树莓派抽什么风，风扇的噪音突然变得奇大无比，弄得潇叫苦连连。虽然我亲自去听了之后觉得声音远远比不上他的神舟和那台安装了FreeBSD的古董机，但毕竟有求于人，这样下去也不是个办法。稍加分析不难得出，风扇声音大是因为24小时常开导致了积灰和磨损，尤其是前者更是难以避免。而我树莓派大部分时候都处于闲置状态，风扇其实是没必要24小时上线的。那么，能不能让风扇按需启动呢？这样一来可以改善噪音问题，同时树莓派困扰许久的供电不足问题也能够得到相应的改善。</p><a id="more"></a><h1 id="初步思路"><a href="#初步思路" class="headerlink" title="初步思路"></a>初步思路</h1><p>那么，如何用树莓派控制风扇呢？不同于PC主板，树莓派并没有能够直接控制风扇的接口，因此要想控制风扇只有通过那40PIN的GPIO来实现。<br>首先我们来查一下树莓派的引脚：<br><img src="pi-gpio.png" alt="树莓派GPIO引脚图"><br>我平时长通使用的就是右侧的4，6号针脚，而需要控制的话，右侧的12号，14号针脚看起来是个理想的选择。</p><h2 id="安装wiringPi"><a href="#安装wiringPi" class="headerlink" title="安装wiringPi"></a>安装wiringPi</h2><p>在树莓派上想要轻松地使用GPIO针脚需要用到<a href="http://wiringpi.com/" target="_blank" rel="noopener">wiringPi</a>这个库，它可以让我们用C或者C++对树莓派的GPIO针脚进行控制。<br>安装过程非常简单，跟着官网教程走就行了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;git.drogon.net&#x2F;wiringPi</span><br><span class="line">cd wiringPi</span><br><span class="line">.&#x2F;build</span><br></pre></td></tr></table></figure><p>竟然不是make略微让我吃惊，不过安装完成没出什么幺蛾子就好<del>(这个flag…)</del>。</p><h2 id="编写控制代码"><a href="#编写控制代码" class="headerlink" title="编写控制代码"></a>编写控制代码</h2><p>其实整个程序的逻辑并不复杂，也就是</p><ol><li>获取温度</li><li>根据预先写好的规则进行判断</li><li>调整GPIO输出</li></ol><p>相关代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wiringPi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEMP_PATH <span class="meta-string">"/sys/class/thermal/thermal_zone0/temp"</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 20  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIO_PIN  18</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getTemp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (wiringPiSetupGpio() == <span class="number">-1</span>) <span class="comment">//初始化GPIO</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Setup wiringPi failed!"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pinMode</span>(GPIO_PIN, <span class="literal">OUTPUT</span>);<span class="comment">//设定输出模式</span></span><br><span class="line"><span class="keyword">float</span> temp;</span><br><span class="line"><span class="keyword">bool</span> status = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp = getTemp();</span><br><span class="line"><span class="keyword">if</span> (temp &gt; <span class="number">50</span>) &#123;</span><br><span class="line"><span class="built_in">digitalWrite</span>(GPIO_PIN, <span class="number">1</span>);<span class="comment">//开启风扇</span></span><br><span class="line">status = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(temp&lt;<span class="number">40</span> &amp;&amp;status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">digitalWrite</span>(GPIO_PIN, <span class="number">0</span>);<span class="comment">//关闭风扇</span></span><br><span class="line">status = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">getTemp</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//获取温度函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="keyword">float</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buf[MAX_SIZE];</span><br><span class="line">fd = <span class="built_in">open</span>(TEMP_PATH, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to open thermal_zone0/temp\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">read</span>(fd, buf, MAX_SIZE) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"failed to read temp\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = atoi(buf) / <span class="number">1000.0</span>;</span><br><span class="line"><span class="built_in">close</span>(fd);</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>这部分就是非常基础了，总之先测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ main.cpp -lwiringPi</span><br></pre></td></tr></table></figure><p>看起来并没有遇到什么问题，那么接下来就尝试运行一下吧。</p><h1 id="碰壁"><a href="#碰壁" class="headerlink" title="碰壁"></a>碰壁</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># root @ rasp in ~&#x2F;projects&#x2F;AutoFan [14:43:28]</span><br><span class="line">$ .&#x2F;a.out</span><br><span class="line">Oops: Unable to determine board revision from &#x2F;proc&#x2F;cpuinfo</span><br><span class="line"> -&gt; No &quot;Hardware&quot; line</span><br><span class="line"> -&gt;  You&#39;d best google the error to find out why.</span><br></pre></td></tr></table></figure><p>喵喵喵？这什么鬼。。看起来是不认我的cpuinfo？<br>赶紧<code>cat</code>一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cat cpuinfo</span><br><span class="line">processor       : 0</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line">Features        : fp asimd evtstrm crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br><span class="line"></span><br><span class="line">processor       : 1</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line">Features        : fp asimd evtstrm crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br><span class="line"></span><br><span class="line">processor       : 2</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line">Features        : fp asimd evtstrm crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br><span class="line"></span><br><span class="line">processor       : 3</span><br><span class="line">BogoMIPS        : 38.40</span><br><span class="line">Features        : fp asimd evtstrm crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br></pre></td></tr></table></figure><p>这就奇怪了，确实没有硬件相关的字段。。难道是我内核的问题？之前为了所谓的性能提升，我给树莓派安装的是64位Debian，并不是官方的通用Raspbian。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在翻了大半天github之后，我找到了这个<a href="https://github.com/bamarni/pi64/issues/35" target="_blank" rel="noopener">issue</a>接着又被导引到<a href="https://github.com/raspberrypi/linux/issues/2110" target="_blank" rel="noopener">这个</a>，里面这个疑似内核维护者的人写道：</p><blockquote><p>1.We aren’t supporting 64-bit builds, although if there are simple things we can do (like hosting defconfigs for arm64) then we will.<br>2.When we do support arm64 it will be with the absolute minimum number of changes to the upstream kernel (ideally none), and the content of /proc/cpuinfo would not be high on the list of priorities. Board revision number and serial number are concepts that don’t appear to exist in the arm64 architecture, but we will continue to make that information available via /proc/device-tree/system/linux,revision and /proc/device-tree/system/linux,serial, with human-readable versions in /proc/device-tree/model and /proc/device-tree/serial-number</p></blockquote><p>大意就是树莓派linux从未支持过arm64，并且arm64的上游内核决定在cpuinfo里面显示更少的信息，并将版本号等信息移到<code>/proc/device-tree/model</code>等地去，他们决定对上游内核做尽可能少的修改，因此不打算修复这个不算bug的问题。所有我能做的就是等待wiringPi等库更新，以兼容arm64。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>很遗憾，根据这个issue提出的日期来看，他们是没有兼容的意向的，因此我现在就维持在一种凉凉的状态。只能说，这就是使用小众系统的代价，找不到文档或者社区支持已经是常态，BSD也好，slackware也好，都是这样。<br>对于这种问题来讲目前是没有什么好思路的，今天天色也不早了，问题留到明天再看看吧。<br>つづく</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前不久不知道树莓派抽什么风，风扇的噪音突然变得奇大无比，弄得潇叫苦连连。虽然我亲自去听了之后觉得声音远远比不上他的神舟和那台安装了FreeBSD的古董机，但毕竟有求于人，这样下去也不是个办法。稍加分析不难得出，风扇声音大是因为24小时常开导致了积灰和磨损，尤其是前者更是难以避免。而我树莓派大部分时候都处于闲置状态，风扇其实是没必要24小时上线的。那么，能不能让风扇按需启动呢？这样一来可以改善噪音问题，同时树莓派困扰许久的供电不足问题也能够得到相应的改善。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="树莓派" scheme="https://blog.gaojianli.me/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>为博客添加Gitalk评论插件</title>
    <link href="https://blog.gaojianli.me/2018/07/24/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/"/>
    <id>https://blog.gaojianli.me/2018/07/24/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</id>
    <published>2018-07-24T13:09:03.000Z</published>
    <updated>2020-12-10T18:22:25.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直以来都想要给自己的博客弄个评论系统，但是hexo作为一个静态博客，本身是不可能具有这种功能的，只能仰仗第三方插件。这方面的插件也非常多，比如disqus、vline等。但这些插件都存在或多或少问题，比如注册麻烦或者干脆国内不能访问。考虑到我家长城宽带的现实，必须选择一个在各地都能流畅访问的插件，这里我选择了<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk</a>.</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>先来看看官网的简介吧：</p><blockquote><p>Gitalk is a modern comment component based on GitHub Issue and Preact.</p></blockquote><p>顾名思义，这是一个基于GitHub的issue功能构建的评论系统。为了部署方便，我的博客本身也是托管在GitHub上的，而且其CDN也遍布全球各地，即使是长城宽带也能保证访问。此外相信本文的绝大多数读者也都具有GitHub账号，这也省去了大家注册的麻烦。因此，从各种意义上来说，它都是一个理想的插件。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>官方提供了2种安装方式：直接引用和npm。<br>直接引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- or --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>npm:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm i --save gitalk</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'gitalk/dist/gitalk.css'</span></span><br><span class="line"><span class="keyword">import</span> Gitalk <span class="keyword">from</span> <span class="string">'gitalk'</span></span><br></pre></td></tr></table></figure><p>就我个人而言我是想使用npm的，但是无奈才疏学浅，研究了半天也没找到该怎么import，只好采用第一种方法了。如果读者找到了方法，还望在评论区不吝赐教。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="创建OAuth应用"><a href="#创建OAuth应用" class="headerlink" title="创建OAuth应用"></a>创建OAuth应用</h2><p>既然是要让大家在issue里面进行提问，肯定是需要GitHub授权的，因此我们需要先注册一个OAuth应用。虽然理论上来说随便新建一个仓库即可，但是我既然已经有博客这一仓库了，干脆就直接把它注册成GitHub应用算了。<br>注册链接在<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">这里</a>，<code>Application name</code>填写你的仓库名，记得<code>Homepage URL</code>和<code>Authorization callback URL</code>一栏一定要填写博客网址，否则授权后无法正常跳转。完成后请记录下<code>clientID</code>和<code>clientSecret</code>，待会儿要用。已经创建的OAuth应用可以在<a href="https://github.com/settings/developers" target="_blank" rel="noopener">设置</a>查看。   </p><h2 id="魔改主题配置文件"><a href="#魔改主题配置文件" class="headerlink" title="魔改主题配置文件"></a>魔改主题配置文件</h2><p>主题方面，NexT本身就支持了<a href="http://theme-next.iissnan.com/third-party-services.html#disqus" target="_blank" rel="noopener">许多评论插件</a>，但很不幸，Gitalk并不在其中。幸运的是NexT使用统一接口接入评论服务，因此我们只需要修改模板文件即可。</p><div class="note warning"><p>拓展阅读：<a href="https://github.com/node-swig/swig-templates" target="_blank" rel="noopener">Swig</a>(swig-templates)不是<a href="http://www.swig.org" target="_blank" rel="noopener">SWIG</a> (Simplified Wrapper and Interface Generator) ，别弄混了。前者是模板引擎，后者是“简化包以及接口生成器”。</p></div><h3 id="新增Gitalk的模板文件"><a href="#新增Gitalk的模板文件" class="headerlink" title="新增Gitalk的模板文件"></a>新增Gitalk的模板文件</h3><p>定位到<code>next/layout/_third-party/comments</code>目录下，新建一个名叫<code>gitalk.swig</code>的文件。hexo渲染模板的时候会自动读取该目录下的<code>index.swig</code>文件，然后根据配置文件里面定义的变量和模板文件里面的语句进行条件渲染。因此我们新建的模板文件也应该依葫芦画瓢：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> not (theme.duoshuo <span class="keyword">and</span> theme.duoshuo.shortname) <span class="keyword">and</span> not theme.duoshuo_shortname %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> theme.gitalk.enable %&#125;、</span><br><span class="line">        &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span><br><span class="line">        &lt;script src=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt; </span><br><span class="line">            <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line">                clientID: <span class="string">'&#123;&#123;theme.gitalk.clientID&#125;&#125;'</span>, </span><br><span class="line">                clientSecret: <span class="string">'&#123;&#123;theme.gitalk.clientSecret&#125;&#125;'</span>,</span><br><span class="line">                id: <span class="string">'&#123;&#123;page.title&#125;&#125;'</span>, </span><br><span class="line">                repo: <span class="string">'&#123;&#123;theme.gitalk.repo&#125;&#125;'</span>,</span><br><span class="line">                owner: <span class="string">'&#123;&#123;theme.gitalk.owner&#125;&#125;'</span>,                     </span><br><span class="line">                admin: <span class="string">'&#123;&#123;theme.gitalk.admin&#125;&#125;'</span>, </span><br><span class="line">                distractionFreeMode: &#123;&#123;theme.gitalk.distractionFreeMode&#125;&#125;,</span><br><span class="line">            &#125;) </span><br><span class="line">            gitalk.render(<span class="string">'gitalk-container'</span>) </span><br><span class="line">        &lt;/script&gt;  </span><br><span class="line">    &#123;% <span class="keyword">endif</span> %&#125; </span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br></pre></td></tr></table></figure><p>上面的代码会在渲染时插入到HTML文件里，因此必须注意script文件引入的顺序，否则可能会出现undefined等错误。<br>随后在同目录下的<code>index.swig</code>文件末尾追加<code>includegitalk.swig</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">include</span> <span class="string">'gitalk.swig'</span> %&#125;</span><br></pre></td></tr></table></figure><p>不过还没完，上面我们只是新增了Gitalk的调用，还得把它放到页面下方评论区才行。打开<code>next/layout/_partials/comments.swig</code>，在valine的后面追加：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">elseif</span> theme.gitalk.enable <span class="keyword">and</span> theme.gitalk.clientID <span class="keyword">and</span> theme.gitalk.clientSecret %&#125;</span><br><span class="line">    &lt;div id=<span class="string">"gitalk-container"</span>&gt;&lt;/div&gt;</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>根据上面的代码我们可以看出，是否渲染主要是根据<code>theme.gitalk.enable</code>和<code>theme.gitalk.distractionFreeMode</code>这两变量来的，并且Gitalk类需要的参数还有<code>theme.gitalk.clientID</code>和<code>theme.gitalk.clientSecret</code>等，那么相应的配置文件应该怎么写就不言而喻了，在主题配置文件<code>_config.yml</code>里面新增如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">clientID:</span> <span class="comment">#填写注册时获得的clientID </span></span><br><span class="line">  <span class="attr">clientSecret:</span> <span class="comment">#注册时获得的密钥</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment">#仓库名</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">gaojianli</span> <span class="comment">#所有者的名字</span></span><br><span class="line">  <span class="attr">admin:</span> <span class="string">gaojianli</span> <span class="comment">#管理员名称</span></span><br><span class="line">  <span class="attr">distractionFreeMode:</span> <span class="literal">false</span> <span class="comment">#这个用于输入框是否具有全屏遮罩</span></span><br></pre></td></tr></table></figure><p>虽然理论上来说放哪里都成，不过为了方便管理还是和其他评论插件放到一起比较好。其中<code>Admin</code>字段是文章未初始化时显示的管理员的名字。<br>保存之后运行<code>hexo g</code>应该就可以看到效果了。不过这样默认背景是透明的，显得非常突兀，因此我决定给它加上背景。直接调用内置的的class，再略微调整下margin就大功告成了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">elseif</span> theme.gitalk.enable <span class="keyword">and</span> theme.gitalk.clientID <span class="keyword">and</span> theme.gitalk.clientSecret %&#125;</span><br><span class="line">    &lt;div class="post-block" id="gitalk-container" style="margin-top:10px"&gt;&lt;/div&gt;</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>未登录：<br><img src="nologin.png" alt="未登录"><br>商业互吹的评论区:<br><img src="logined.png" alt="评论区登录"></p><h1 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h1><p>新发的文章可能出现如下的情况:<br><img src="uninitialized.png" alt="未初始化"><br>可能是GitHub的限制吧，其他人通过Gitalk是没法主动创建issue的，换句话说，需要“初始化”。初始化的方法也非常简单：用管理员账号登录GitHub后打开相应的博文即可。</p><h1 id="追加：一个小Bug"><a href="#追加：一个小Bug" class="headerlink" title="追加：一个小Bug"></a>追加：一个小Bug</h1><p>自从撰写这篇文章之后已经过去了许多时间，前不久无意中发现了一个小Bug，那就是在tags页面hexo也渲染了评论区:<br><img src="bug.png" alt="在标签页也渲染了评论区"><br>既然是问题那就要解决，正巧今天中午无事，就来好好看看吧。<br>首先我们要知道，NexT主题使用了各种各样的库，其中就有大名鼎鼎的<a href="https://jquery.com/" target="_blank" rel="noopener">jQuery</a>，虽然JQ是著名的“<strong>JQ一时爽，维护火葬场</strong>”，但正常人没事也不会去修改主题文件。那么我就图个省事，直接用jQ进行修改吧。<br>思路大概如下：</p><ol><li>修改<code>gitalk.swig</code>，判断当前页面是否为tags页面</li><li>若是，直接移除id为<code>gitalk-container</code>的div即可<br>既然是要判断页面是否存在，因此需要寻找特征元素，在这里我选取的是<code>div.tag-cloud</code>这一元素，因此直接判断是否存在即可，最终代码如下:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> not (theme.duoshuo <span class="keyword">and</span> theme.duoshuo.shortname) <span class="keyword">and</span> not theme.duoshuo_shortname %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> theme.gitalk.enable %&#125;、</span><br><span class="line">        &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span><br><span class="line">        &lt;script src=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt; </span><br><span class="line">        <span class="keyword">if</span>($(<span class="string">".tag-cloud"</span>).length===<span class="number">0</span>)<span class="comment">//判断元素是否存在</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line">                clientID: <span class="string">'&#123;&#123;theme.gitalk.clientID&#125;&#125;'</span>, </span><br><span class="line">                clientSecret: <span class="string">'&#123;&#123;theme.gitalk.clientSecret&#125;&#125;'</span>,</span><br><span class="line">                id: <span class="string">'&#123;&#123;page.title&#125;&#125;'</span>, </span><br><span class="line">                repo: <span class="string">'&#123;&#123;theme.gitalk.repo&#125;&#125;'</span>,</span><br><span class="line">                owner: <span class="string">'&#123;&#123;theme.gitalk.owner&#125;&#125;'</span>,                     </span><br><span class="line">                admin: <span class="string">'&#123;&#123;theme.gitalk.admin&#125;&#125;'</span>, </span><br><span class="line">                distractionFreeMode: &#123;&#123;theme.gitalk.distractionFreeMode&#125;&#125;,</span><br><span class="line">            &#125;) </span><br><span class="line">            gitalk.render(<span class="string">'gitalk-container'</span>) </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="keyword">if</span>($(<span class="string">".page-home"</span>).length===<span class="number">0</span>) <span class="comment">//判断是否为主页</span></span><br><span class="line">            $(<span class="string">"#gitalk-container"</span>).remove()<span class="comment">//移除相应元素</span></span><br><span class="line">        &lt;/script&gt;  </span><br><span class="line">    &#123;% <span class="keyword">endif</span> %&#125; </span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br></pre></td></tr></table></figure>最终效果可以点击<a href="/tags">这里</a><br>では、諸君は。<h1 id="再更新：2018-07-25"><a href="#再更新：2018-07-25" class="headerlink" title="再更新：2018-07-25"></a>再更新：2018-07-25</h1>经过Xice的<a href="https://blog.xice.wang/2018/07/25/%E4%BD%BF%E7%94%A8valine%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/#%E5%90%8E%E7%BB%AD" target="_blank" rel="noopener">提醒</a>，哪儿那么麻烦，直接在<code>tags/index.md</code>里面添加<code>comments: false</code>不就完了！</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直以来都想要给自己的博客弄个评论系统，但是hexo作为一个静态博客，本身是不可能具有这种功能的，只能仰仗第三方插件。这方面的插件也非常多，比如disqus、vline等。但这些插件都存在或多或少问题，比如注册麻烦或者干脆国内不能访问。考虑到我家长城宽带的现实，必须选择一个在各地都能流畅访问的插件，这里我选择了&lt;a href=&quot;https://github.com/gitalk/gitalk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gitalk&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;先来看看官网的简介吧：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gitalk is a modern comment component based on GitHub Issue and Preact.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顾名思义，这是一个基于GitHub的issue功能构建的评论系统。为了部署方便，我的博客本身也是托管在GitHub上的，而且其CDN也遍布全球各地，即使是长城宽带也能保证访问。此外相信本文的绝大多数读者也都具有GitHub账号，这也省去了大家注册的麻烦。因此，从各种意义上来说，它都是一个理想的插件。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="博客" scheme="https://blog.gaojianli.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的Git</title>
    <link href="https://blog.gaojianli.me/2018/07/13/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Git/"/>
    <id>https://blog.gaojianli.me/2018/07/13/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84Git/</id>
    <published>2018-07-13T14:44:25.000Z</published>
    <updated>2020-12-10T18:22:25.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>事情的起因非常简单，得益于某位校长的功劳，我的网络访问Github奇慢无比，最近甚至出现了push失败的情况，我连博客都没法好好更新了！<del><strong>（说的好像你更新得很多一样）</strong></del><br>嘛，正好潇在给我孜孜不倦地推荐<a href="https://gitea.io/" target="_blank" rel="noopener">Gitea</a>，我就来试试在树莓派上搭建一下吧。<br>首先我们来看官方文档：</p><blockquote><p>易安装<br>您除了可以根据操作系统平台通过 二进制运行，还可以通过 Docker 或 Vagrant，以及 包管理 安装。</p></blockquote><p>嚯，挺厉害嘛，那就图个省事，用Docker安装吧。然而这之后我才知道，这是地狱的开始。</p><h1 id="Docker试探"><a href="#Docker试探" class="headerlink" title="Docker试探"></a>Docker试探</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方的教程非常的简单，<del>看起来就和能用一样</del></p><a id="more"></a><blockquote><p>我们在 Docker Hub 的 Gitea 组织中提供了自动更新的 Docker 镜像，它会保持最新的稳定版。你也可以用其它 Docker 服务来更新。首先你需要pull镜像：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitea/gitea:latest</span><br><span class="line">sudo mkdir -p /var/lib/gitea //如果要将git和其它数据持久化，你需要创建一个目录来作为数据存储的地方</span><br><span class="line">docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /var/lib/gitea:/data gitea/gitea:latest //然后就可以运行 docker 容器了，这很简单。 当然你需要定义端口数数据目录：</span><br></pre></td></tr></table></figure><p>这时候我才发现我根本就没有安装docker，赶紧apt解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install docker</span><br></pre></td></tr></table></figure><p>然后开始pull，这时又要忍受国内网络的龟速：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitea&#x2F;gitea:latest</span><br><span class="line">latest: Pulling from gitea&#x2F;gitea</span><br><span class="line">911c6d0c7995: Pull complete</span><br><span class="line">fe8708a98e1d: Pull complete</span><br><span class="line">754e5dc9c218: Pull complete</span><br><span class="line">99ffba26b3d3: Pull complete</span><br><span class="line">ee04a0c4cde1: Pull complete</span><br><span class="line">78a8e5235d3e: Pull complete</span><br><span class="line">Digest: sha256:6f28b3e5127f29f614b765738cf5e4d673b1a0762d42c095323433c26eef779d</span><br><span class="line">Status: Downloaded newer image for gitea&#x2F;gitea:latest</span><br></pre></td></tr></table></figure><h2 id="受阻"><a href="#受阻" class="headerlink" title="受阻"></a>受阻</h2><p>尝试运行一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># root @ rasp in ~ [14:46:44]</span><br><span class="line">$ docker run -d --name&#x3D;gitea -p 10022:22 -p 10080:3000 -v &#x2F;mnt&#x2F;disk&#x2F;Git:&#x2F;data gitea&#x2F;gitea:latest</span><br><span class="line">ee43cb4883e4d6e75f0eea1c8b90988880c1569b7088bc1f072274f2a2eaf4dc</span><br></pre></td></tr></table></figure><p>没有回显，不过还是先看看容器跑起来没有:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># root @ rasp in ~ [14:46:54]</span><br><span class="line">$ docker logs gitea</span><br><span class="line">standard_init_linux.go:185: exec user process caused &quot;exec format error&quot;</span><br></pre></td></tr></table></figure><p>喵喵喵？这尼玛是啥？看起来好像是可执行文件架构不对。。</p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>兔角龟毛，总之先inspect一下吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># root @ rasp in ~ [14:55:17]</span><br><span class="line">$ docker inspect gitea&#x2F;gitea:latest</span><br></pre></td></tr></table></figure><p>得到如下结果:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"Id"</span>: <span class="string">"sha256:67ff9596dc004fdbbd87289f854ef8fb2920ab66621155117f618290457f42c9"</span>,</span><br><span class="line">        <span class="attr">"RepoTags"</span>: [</span><br><span class="line">            <span class="string">"gitea/gitea:latest"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"RepoDigests"</span>: [</span><br><span class="line">            <span class="string">"gitea/gitea@sha256:6f28b3e5127f29f614b765738cf5e4d673b1a0762d42c095323433c26eef779d"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"Parent"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"Comment"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"Created"</span>: <span class="string">"2018-07-12T14:14:03.941666864Z"</span>,</span><br><span class="line">        <span class="attr">"Container"</span>: <span class="string">"9c524fa2972be8a9c2e777219e07bdb23c8a21a18cff8d7884f2df6c95795948"</span>,</span><br><span class="line">        <span class="attr">"ContainerConfig"</span>: &#123;</span><br><span class="line">            <span class="attr">"Hostname"</span>: <span class="string">"9c524fa2972b"</span>,</span><br><span class="line">            <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"ExposedPorts"</span>: &#123;</span><br><span class="line">                <span class="attr">"22/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="attr">"3000/tcp"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"Env"</span>: [</span><br><span class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</span><br><span class="line">                <span class="string">"USER=git"</span>,</span><br><span class="line">                <span class="string">"GITEA_CUSTOM=/data/gitea"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"Cmd"</span>: [</span><br><span class="line">                <span class="string">"/bin/sh"</span>,</span><br><span class="line">                <span class="string">"-c"</span>,</span><br><span class="line">                <span class="string">"#(nop) "</span>,</span><br><span class="line">                <span class="string">"LABEL org.label-schema.build-date=2018-07-12T14:11:41Z org.label-schema.vcs-ref=659bc727bd12bf219d80d38d8b634bd578ddb84f org.label-schema.vcs-url=https://github.com/go-gitea/gitea.git"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"ArgsEscaped"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"Image"</span>: <span class="string">"sha256:5789f396c54923dbf5643737a149337f5fc0c1fd0cc186f41ecc30c96b300e9a"</span>,</span><br><span class="line">            <span class="attr">"Volumes"</span>: &#123;</span><br><span class="line">                <span class="attr">"/data"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"Entrypoint"</span>: [</span><br><span class="line">                <span class="string">"/usr/bin/entrypoint"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"Labels"</span>: &#123;</span><br><span class="line">                <span class="attr">"maintainer"</span>: <span class="string">"maintainers@gitea.io"</span>,</span><br><span class="line">                <span class="attr">"org.label-schema.build-date"</span>: <span class="string">"2018-07-12T14:11:41Z"</span>,</span><br><span class="line">                <span class="attr">"org.label-schema.vcs-ref"</span>: <span class="string">"659bc727bd12bf219d80d38d8b634bd578ddb84f"</span>,</span><br><span class="line">                <span class="attr">"org.label-schema.vcs-url"</span>: <span class="string">"https://github.com/go-gitea/gitea.git"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"DockerVersion"</span>: <span class="string">"17.12.0-ce"</span>,</span><br><span class="line">        <span class="attr">"Author"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"Config"</span>: &#123;</span><br><span class="line">            <span class="attr">"Hostname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"ExposedPorts"</span>: &#123;</span><br><span class="line">                <span class="attr">"22/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="attr">"3000/tcp"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"Env"</span>: [</span><br><span class="line">                <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</span><br><span class="line">                <span class="string">"USER=git"</span>,</span><br><span class="line">                <span class="string">"GITEA_CUSTOM=/data/gitea"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"Cmd"</span>: [</span><br><span class="line">                <span class="string">"/bin/s6-svscan"</span>,</span><br><span class="line">                <span class="string">"/etc/s6"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"ArgsEscaped"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"Image"</span>: <span class="string">"sha256:5789f396c54923dbf5643737a149337f5fc0c1fd0cc186f41ecc30c96b300e9a"</span>,</span><br><span class="line">            <span class="attr">"Volumes"</span>: &#123;</span><br><span class="line">                <span class="attr">"/data"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"Entrypoint"</span>: [</span><br><span class="line">                <span class="string">"/usr/bin/entrypoint"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"Labels"</span>: &#123;</span><br><span class="line">                <span class="attr">"maintainer"</span>: <span class="string">"maintainers@gitea.io"</span>,</span><br><span class="line">                <span class="attr">"org.label-schema.build-date"</span>: <span class="string">"2018-07-12T14:11:41Z"</span>,</span><br><span class="line">                <span class="attr">"org.label-schema.vcs-ref"</span>: <span class="string">"659bc727bd12bf219d80d38d8b634bd578ddb84f"</span>,</span><br><span class="line">                <span class="attr">"org.label-schema.vcs-url"</span>: <span class="string">"https://github.com/go-gitea/gitea.git"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">        <span class="attr">"Os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="attr">"Size"</span>: <span class="number">75448364</span>,</span><br><span class="line">        <span class="attr">"VirtualSize"</span>: <span class="number">75448364</span>,</span><br><span class="line">        <span class="attr">"GraphDriver"</span>: &#123;</span><br><span class="line">            <span class="attr">"Data"</span>: &#123;</span><br><span class="line">                <span class="attr">"LowerDir"</span>: <span class="string">"/var/lib/docker/overlay2/9fce26ccc4b7e0aefe663ecb165615aadda2d2437b3ab7cafab599de5d055736/diff:/var/lib/docker/overlay2/a0cf2ef094b8fb958037aff40de9cf54cd2c1be580fbe2fe592b5839e1a08cd5/diff:/var/lib/docker/overlay2/29e0cfce429c5eba2e674761d6a27dc914a2432a5b87c4eb7168623f62f0ed35/diff:/var/lib/docker/overlay2/b37847000ccdd55f5acd0ea549f16073da142458dd7e1cc1487d5ce2ea944611/diff:/var/lib/docker/overlay2/c1e252414cf059e505f719e559a35d5635608c136cdac00bce2ecba73dbf5111/diff"</span>,</span><br><span class="line">                <span class="attr">"MergedDir"</span>: <span class="string">"/var/lib/docker/overlay2/196a454e1b7f7f5f0424e1afefd7a5b1b07edce529dca3f5b8a6a591f51de02f/merged"</span>,</span><br><span class="line">                <span class="attr">"UpperDir"</span>: <span class="string">"/var/lib/docker/overlay2/196a454e1b7f7f5f0424e1afefd7a5b1b07edce529dca3f5b8a6a591f51de02f/diff"</span>,</span><br><span class="line">                <span class="attr">"WorkDir"</span>: <span class="string">"/var/lib/docker/overlay2/196a454e1b7f7f5f0424e1afefd7a5b1b07edce529dca3f5b8a6a591f51de02f/work"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"overlay2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"RootFS"</span>: &#123;</span><br><span class="line">            <span class="attr">"Type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">            <span class="attr">"Layers"</span>: [</span><br><span class="line">                <span class="string">"sha256:717b092b8c86356cf976d9c83fa6f0ea67f2bf3148a5bbb7e02026a5d3245e68"</span>,</span><br><span class="line">                <span class="string">"sha256:0c8bc7fe995df099706fa9de6efe8780873009fa9bd88c1d061a9da42208ce3d"</span>,</span><br><span class="line">                <span class="string">"sha256:934a2cc01616c95aceffe2f7c906d0608e3d3e69d6c315e6b35980138b72bfa6"</span>,</span><br><span class="line">                <span class="string">"sha256:13f47d251abf8fb04b518a7f78a626d3aa8edd19690cec8158972ad6297866a7"</span>,</span><br><span class="line">                <span class="string">"sha256:5e395242ed599a17ffa4225218344a6ac2c336ba774be69ef59d5a4323f0a1e9"</span>,</span><br><span class="line">                <span class="string">"sha256:dd6e07b2f31502448541c62eb16a27958f3a8cb91fafa8010961a72b209ccc43"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Metadata"</span>: &#123;</span><br><span class="line">            <span class="attr">"LastTagTime"</span>: <span class="string">"0001-01-01T00:00:00Z"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>进入到LowerDir看一下？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># root @ rasp in &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9fce26ccc4b7e0aefe663ecb165615aadda2d2437b3ab7cafab599de5d055736&#x2F;diff&#x2F;app&#x2F;gitea [15:18:01]</span><br><span class="line">$ ls</span><br><span class="line">gitea</span><br></pre></td></tr></table></figure><p>只有一个执行文件，这时候需要请出file大法了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># root @ rasp in &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;9fce26ccc4b7e0aefe663ecb165615aadda2d2437b3ab7cafab599de5d055736&#x2F;diff&#x2F;app&#x2F;gitea [15:18:02]</span><br><span class="line">$ file gitea</span><br><span class="line">gitea: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib&#x2F;ld-musl-x86_64.so.1, stripped</span><br></pre></td></tr></table></figure><p>やっぱり！™这个文档谁写的！头伸过来，看我不来给你加个bug，你写这个文档的时候就没考虑过其他架构的CPU的感受么！你是不是看不起ARM！！</p><h2 id="最后的挣扎"><a href="#最后的挣扎" class="headerlink" title="最后的挣扎"></a>最后的挣扎</h2><p>嘛，既然这样了，摆在我面前也就三条路:</p><ol><li>制作基于ARM64的docker容器</li><li>放弃docker</li><li>玩一些骚操作<br>首先来看看骚操作，既然它的运行依靠的是单文件，那我如果下载arm64的二进制文件手动替换，不就可以运行了么？<br>但是事实狠狠的打了我的脸，前面的替换进行地很顺利，直到…<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@rasp:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2# cd b37847000ccdd55f5acd0ea549f16073da142458dd7e1cc1487d5ce2ea944611&#x2F;diff&#x2F;bin&#x2F;</span><br><span class="line">root@rasp:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;b37847000ccdd55f5acd0ea549f16073da142458dd7e1cc1487d5ce2ea944611&#x2F;diff&#x2F;bin# ls</span><br><span class="line">background        fdreserve     multisubstitute             s6-fdholder-list           s6-ipcserver               s6-svlisten1</span><br><span class="line">backtick          fdswap        pipeline                    s6-fdholder-listc          s6-ipcserver-access        s6-svok</span><br><span class="line">bash              forbacktickx  piperw                      s6-fdholder-retrieve       s6-ipcserverd              s6-svscan</span><br><span class="line">bashbug           foreground    redirfd                     s6-fdholder-retrievec      s6-ipcserver-socketbinder  s6-svscanctl</span><br><span class="line">cd                forstdin      runblock                    s6-fdholder-setdump        s6lockd                    s6-svstat</span><br><span class="line">define            forx          s6-accessrules-cdb-from-fs  s6-fdholder-setdumpc       s6-log                     s6-svwait</span><br><span class="line">dollarat          getcwd        s6-accessrules-fs-from-cdb  s6-fdholder-store          s6-mkfifodir               s6-tai64n</span><br><span class="line">elgetopt          getpid        s6-applyuidgid              s6-fdholder-storec         s6-notifyoncheck           s6-tai64nlocal</span><br><span class="line">elgetpositionals  heredoc       s6-cleanfifodir             s6-fdholder-transferdump   s6-setlock                 shift</span><br><span class="line">elglob            homeof        s6-connlimit                s6-fdholder-transferdumpc  s6-setsid                  trap</span><br><span class="line">emptyenv          if            s6-envdir                   s6-fghack                  s6-setuidgid               tryexec</span><br><span class="line">exec              ifelse        s6-envuidgid                s6-ftrig-listen            s6-softlimit               ucspilogd</span><br><span class="line">execlineb         ifte          s6-fdholderd                s6-ftrig-listen1           s6-sudo                    umask</span><br><span class="line">exit              ifthenelse    s6-fdholder-daemon          s6-ftrig-notify            s6-sudoc                   unexport</span><br><span class="line">export            import        s6-fdholder-delete          s6-ftrigrd                 s6-sudod                   wait</span><br><span class="line">fdblock           importas      s6-fdholder-deletec         s6-ftrig-wait              s6-supervise               withstdinas</span><br><span class="line">fdclose           loopwhilex    s6-fdholder-getdump         s6-ioconnect               s6-svc</span><br><span class="line">fdmove            multidefine   s6-fdholder-getdumpc        s6-ipcclient               s6-svlisten</span><br><span class="line">root@rasp:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;b37847000ccdd55f5acd0ea549f16073da142458dd7e1cc1487d5ce2ea944611&#x2F;diff&#x2F;bin# file bash</span><br><span class="line">bash: ELF 64-bit LSB pie executable x86-64, version 1 (SYSV), dynamically linked, interpreter &#x2F;lib&#x2F;ld-musl-x86_64.so.1, stripped</span><br></pre></td></tr></table></figure></li></ol><p><strong>惹不起，惹不起，告辞！</strong><br>至于编译，我实在不想弄，理由如下：<br>首先，有了上次编译驱动的经历之后，我是再也不想在树莓派上编译任何东西了。且不说CPU的弱鸡，光是内存不足就足够你喝一壶的。至于交叉编译？不好意思，编译之神Baymax持续掉线中。</p><h1 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h1><p>那就只有来二进制文件了。<br>嘛，这个就没啥说的了，直接参照<a href="https://docs.gitea.io/en-us/install-from-binary/" target="_blank" rel="noopener">官方教程</a>就好了。<br>配置文件随便根据官网改改就好，这里就不贴出来。</p><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><a href="https://git.gaojianli.me/" target="_blank" rel="noopener">Gitea</a><br>嘛，就是这样，试过了速度还行。还拥有镜像功能，可以自动追踪某一个远程仓库，以后有啥小项目就决定是你了！<br>では、諸君は。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;事情的起因非常简单，得益于某位校长的功劳，我的网络访问Github奇慢无比，最近甚至出现了push失败的情况，我连博客都没法好好更新了！&lt;del&gt;&lt;strong&gt;（说的好像你更新得很多一样）&lt;/strong&gt;&lt;/del&gt;&lt;br&gt;嘛，正好潇在给我孜孜不倦地推荐&lt;a href=&quot;https://gitea.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gitea&lt;/a&gt;，我就来试试在树莓派上搭建一下吧。&lt;br&gt;首先我们来看官方文档：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;易安装&lt;br&gt;您除了可以根据操作系统平台通过 二进制运行，还可以通过 Docker 或 Vagrant，以及 包管理 安装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嚯，挺厉害嘛，那就图个省事，用Docker安装吧。然而这之后我才知道，这是地狱的开始。&lt;/p&gt;
&lt;h1 id=&quot;Docker试探&quot;&gt;&lt;a href=&quot;#Docker试探&quot; class=&quot;headerlink&quot; title=&quot;Docker试探&quot;&gt;&lt;/a&gt;Docker试探&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;官方的教程非常的简单，&lt;del&gt;看起来就和能用一样&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="树莓派" scheme="https://blog.gaojianli.me/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Web" scheme="https://blog.gaojianli.me/tags/Web/"/>
    
      <category term="服务器" scheme="https://blog.gaojianli.me/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>微软Insider DevTour小记</title>
    <link href="https://blog.gaojianli.me/2018/06/28/%E5%BE%AE%E8%BD%AFInsider-DevTour%E5%B0%8F%E8%AE%B0/"/>
    <id>https://blog.gaojianli.me/2018/06/28/%E5%BE%AE%E8%BD%AFInsider-DevTour%E5%B0%8F%E8%AE%B0/</id>
    <published>2018-06-28T23:16:01.000Z</published>
    <updated>2020-12-10T18:22:25.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一阵子收到了微软发给所有的insider的邀请邮件，大意说是DevTour即将巡回到北京，欢迎参加云云。弱鸡表示从来没听过这个名字，吓得我赶紧百度了一下：</p><blockquote><p>每年，我们都将最新的技术带给全球的开发者。今年，我们通过与Windows、Windows Insider项目以及我们的开发者和内部人士的合作伙伴关系，将活动扩展到更多的城市。我们将介绍人工智能，最新的桌面开发，微软365，进步网络应用，开发者办公室，混合现实，Microsoft Graph，等等。此次巡回活动是开发者与来自微软总部雷德蒙德的领导和工程师以及地区行业领先和微软开发者MVPs和RDs相互直接交流的一次绝佳机会。</p></blockquote><p>概括一下大概就是5个字：<strong>大佬见面会</strong><br>然而不幸的是这一天恰好是我考高数的日子，以前处在偏远山区的我看见这类活动只能望汤兴叹，好容易在北京，怎么能就这样鸽了呢？于是乎赶紧发邮件问了一下能否下午到场，所幸得到了肯定的答复。</p><h1 id="到达"><a href="#到达" class="headerlink" title="到达"></a>到达</h1><p>不得不吐槽沙河校区的偏远程度超乎想象，上午高数凉了（迫真）以后即使我以最快速度向会场赶，最终在会议开始前最后一刻才成功赶到。</p><a id="more"></a><p>走进酒店，首先看见的就是指引牌。和我想象的不一样，微软并没有大张旗鼓地打印海报，仅仅是在门口放了个一人高的牌子，这与其选择如此昂贵酒店的土豪作风反而显得格格不入。<br><img src="guidance.jpg" alt="门口的小小指引牌"></p><p>快速完成了签到后领到了参会牌和会议集章册，后者印着会议日程，虽然是早已公布在网站上的：</p><ul><li>签到</li><li>开始签到</li><li>主题演讲</li><li>茶歇时间</li><li>如何在Windows 10上，进化您现有的应用程序</li><li>如何充分利用PWA开发Web App</li><li>午餐</li><li>基于 Azure Kubernetes Services 的DevOps 全生命周期流水线</li><li>如何使用Office 365创建高效应用程序</li><li>如何使用Microsoft Graph在所有设备上提升用户参与度</li><li>茶歇时间</li><li>边缘计算中的智能化 - 机器学习入门</li><li>构建Windows混合现实应用程序</li><li>If(dev) { Insider(); }</li><li>互动问答<br><img src="card.jpg" alt="集章卡"><br>进入会场的时候，里面似乎正在进行类似一站到底的游戏，当然题目都是编程方面的，从Visual Basic到C#无所不包，（据说Basic的题目淘汰了许多年轻人）。其题目更多的是考察诸如位运算这种深层次的理解。下面是只剩两人的时候的巅峰对决，你能说出答案么？<br><img src="challenge.jpg" alt="只剩两人的巅峰对决"><br>当然也不乏这种让人跑路的逗逼题目:<blockquote><p>  Which command can exit vim?<br>Head:”:wq” Tails:”rm -rf /“</p></blockquote></li></ul><h1 id="上半场"><a href="#上半场" class="headerlink" title="上半场"></a>上半场</h1><p>最终夺冠的是右边的小哥，在他选择完奖品之后，讲座终于正式开始</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><p>这一节主要讲的是k8s和DevOps对于产品开发流程的构建。 首先主讲人Lei Xu给我们回顾了一下软件开发的架构变化:<br><img src="dev-art.jpg" alt="软件开发的流程变化"><br>现如今，软件的生命周期更多地向组件化，容器化发展，开发者开始更多的着眼于软件的开发，而不再去担心服务器环境的配置。Iaas的出现让开发者不用再去关心服务器的供电、网络等问题，云主机的出现则免去了操作系统和相关业务软件的配置和维护。而Docker则将软件的运行环境和系统环境实现了分离，开发环境和生产环境的差异不再是个问题。然而，即使采用了docker，容器依旧需要命令行进行管理、维护，与此同时至于k8s，先看看官方（百度）定义：</p><blockquote><p>Kubernetes（k8s）是自动化容器操作的开源平台，这些操作包括部署，调度和节点集群间扩展。如果你曾经用过Docker容器技术部署容器，那么可以将Docker看成Kubernetes内部使用的低级别组件。</p></blockquote><p>k8s可以理解为一种类似腾讯云的管理平台。只不过腾讯云你开的是云主机，k8s开的是一个个容器，在这个平台上，你完全不用担心宿主机的运行状况，你的眼中有的只有一个个容器，一个个微服务。但是k8s的配置是极其复杂的，Xu在场上做了一个调查，与会的诸位中配置过k8s的只有一个人。应对这个问题，Azure提供了一个一键式平台解决方案，国内提供类似服务的好像还有阿里云。<br>至于DevOps，软工的诸位一定不会陌生，这是一种软件开发生命周期的解决方案。<br><img src="Devops.jpg" alt="DevOps"><br>不过别看他说的神乎其神，微软的提供的主要是以VSTS和Azure为中心展开的业务，后者没用过不了解，但前者其实诟病甚多。主要是操作逻辑感人，喜欢把简单问题复杂化，我找个删除找了半个小时。此外Work Item的分配竟然要一个非常睿智的Query来查看，而且和宇宙第一IDE的结合也不甚完美，当然也可能是我不会用吧。毕竟人家有个岗位可是叫做<strong><span style="color:red">DevOps</span></strong>工程师呢。<br>值得一提的是，可能是Azure在Edge上翻车翻多彻底绝望了吧，现场演示的计算机换成了一台运行着<strong>Chrome</strong>的<strong>Mac</strong>，有图为证（有点糊了）：<br><img src="mac_chrome.jpg" alt="现场演示用计算机竟然是运行Chrome的Mac"><br>最后的最后，在玩滥的One more thing..之后，他介绍了一个叫做DevOps魔盒的东东，反正就是个一条龙服务，感兴趣的可以关注一下。</p><h2 id="Teams-app开发"><a href="#Teams-app开发" class="headerlink" title="Teams app开发"></a>Teams app开发</h2><p>关于这方面，由于我并不是Office 365的订阅者(2020年6月22日Update：现在是了)，因此我并不是很清楚。大意就是Office又填了一个新成员叫做Teams，应该是用于团队协作用的。这个Teams可以添加各种各种各样的web apps用于团队合作。然后这些app可以调用各种各样的数据，如下：</p><ul><li>Audio and video conferencing</li><li>Permanent chat</li><li>Online meetings and broadcasts</li><li>Shared files in SharePoint</li><li>Team notes in OneNote</li><li>Team tasks in Planner</li><li>Shared email inbox, calendar and email address</li><li>Available for web, desktop and mobile<br>这些app主要分为两类:Tabs和Bots，前者是作为一个选项卡嵌入Teams，有点类似组件，后者顾名思义是机器人。项目基于万能的html和Typescript开发，支持Visual Studio远程调试<br><img src="remote_debug.jpg" alt="Visual Studio远程调试"><br>不过我并没有在国内看到什么人使用，也没听说哪个公司大规模购置了office 365，毕竟在你国万物可是都有替代的：<blockquote><p>版本控制？那是什么？用QQ群就够了<br>团队协作？Sharepoint?不需要，我有QQ群<br>视频会议？Skype？对不起，我还是又QQ群<br>Teams?没听过的东西，能有QQ群好用么？</p></blockquote></li></ul><p>毕竟，那句话咋说的来着？</p><blockquote class="blockquote-center"><p><span style="font-size:3em">又不是不能用</span> </p></blockquote><h1 id="Microsoft-Graph"><a href="#Microsoft-Graph" class="headerlink" title="Microsoft Graph"></a>Microsoft Graph</h1><p>这个我觉得是今天下午的重中之重了，由Justin Liu给我们带来。虽然错过了上午的PWA有点可惜，不过听了这个便已经不虚此行了，你看我手都抖得不能自已了:</p><p><img src="graph1.jpg" alt="激动得手抖"><br>那么什么是MS Graph呢？Graph是微软提供的一组用于获取基于微软各项服务中产生的各种数据的api（挺绕口的），通俗地说就是你在使用微软各项服务的时侯他收集了你的隐私，然后提供了一些接口让你能够利用这个数据。我们评判一个数据提供方最主要的指标就是数据数量以及质量，那么，这个数据量究竟有多大呢，微软给了张图:<br><img src="(graph2.jpg" alt="Graph数据量"><br>可以看到这个数据量是非常可观的，来源也非常广泛，例如Office365、Outlook、Onedrive，甚至Windows 10的Timeline。可以说，只要你使用过微软相关的云服务，你就都会有记录下来。那么究竟有那些数据呢？<br>API主要分为两类，User和Activity。前者包含的主要是用户的基本信息以及人脉信息，可以获取例如我的工作伙伴，我的照片，我的邮箱等个人信息，API以/me打头，后接简单的单词，通过GET或者POST发送请求，(2020年6月22日Update：就是Restful API)然后服务器返回JSON，如图所示：<br><img src="graph3.jpg" alt="Graph API返回的是JSON数据"><br>相信看到这里，有些小伙伴心里面已经有一些应用场景了，如果没有的话请再看下面这张图：<br><img src="graph4.jpg" alt="模板渲染+组件化"><br>是不是觉得挺眼熟？没错，前端中常见的组件化数据绑定和模板渲染！这简直是为Vue.js这种数据绑定的框架量身定制的，有这些API做个个人dashboard或者智能助理完全不是问题。<br>值得注意的是，这里官方给的Demo是追踪日历变化，在会议时长占比超过80%的时候自动提示，其关于人脉方面的API数据来源则是Office Teams，因此对于没有使用Office 365的小伙伴来说，这部分功能算是废了。不过尽管如此，剩下的API也依旧让人兴奋。<br>Microsoft Graph除了获取数据的API外，还提供了一些动作性API用于执行发送邮件等主动操作，主要通过POST访问，例如下面这个自动文档审批工作流：<br><img src="graph5.jpg" alt="自动文档审批工作流"><br>前面我提到了组件化和数据绑定，微软也提出了一种新型控件（暂时姑且这么叫）<a href="https://adaptivecards.io/" target="_blank" rel="noopener">Adaptive Card</a><br><img src="graph6.jpg" alt="Adaptive"><br>这是一种可适应性的卡片数据交换方式，或者应该叫可适应模板。之所以被称为可适应，是因为它采用json方式传入数据，而根据应用场景的不同可以渲染成不同的样子，例如小娜消息，Skype消息，Windows Timeline等等，亦即“一份数据，万种表现”。<br>前面提到了Graph的API还有Activity这一大类，其全名是Activity &amp; Device，从名字上我们可以看出，这一类主要是偏向用户对设备的使用，而不是依赖于某个软件<br><img src="graph7.jpg" alt="Activity 类API更加倾向于实体设备"><br>通过这组API我们可获取到Windows上的应用使用情况，推送Timeline消息，向特定设备推送消息等。随后，Justin展示了如何在Windows10 1803上自定义显示TImeline消息，支持对标题、显示信息甚至背景实施自定义。<br><img src="graph8.jpg" alt="使用Activity API"></p><h1 id="幕间"><a href="#幕间" class="headerlink" title="幕间"></a>幕间</h1><p>讲座到此暂歇，我也出去逛了逛喝口水，看了看一辈子也买不起的Hololens（本来是想体验的。。人太多了ORZ）<br>在此我要大喊：微软牌蛋糕真好吃！<br><img src="cake.jpg" alt="巨硬大法好"></p><h1 id="下半场"><a href="#下半场" class="headerlink" title="下半场"></a>下半场</h1><p>下午3点半，讲座继续。</p><h2 id="WindowsML"><a href="#WindowsML" class="headerlink" title="WindowsML"></a>WindowsML</h2><p>主讲继续是Nikola Metulev大佬，他一手打造了UWP community tookit的，他的英语是唯一一个不用传译器能听懂的，其他印度英语惹不起。<br>说实话，我一看是看见WindowsML的时候是把它看成了MR，后来又当作标记语言，直到今天我才知道这是Machine Learning的意思。<br><img src="ml1.jpg" alt="Machine Learning"><br>说到机器学习，常规方法是通过服务器（炼丹炉）对成千上万的样本进行训练，然后得到模型进行评估，而且这种训练多半是发生在Linux上的，似乎与Windows无缘。但是，在海量样本的收集过程中，免不了会收集大量的隐私，而这对于多数用户来说是不可忽视的。因此AI在边缘计算中的重要性也在不断提高，而作为桌面上最流行的操作系统，WindowsML的存在就显得尤为必要。随后，他在Surface book 2上演示了实时的摄像头画面处理：<br><img src="ml2.jpg" alt="在Surface上演示视频处理"><br>这除了说明Surface Book 2性能很强（<s>广告嫌疑</s>）外，也说明了WindowsML具有不错的性能。然而，如果就仅仅如此的话，WindwosML也并没有什么太过出彩的地方，也难以吸引别人放弃流行的Linux平台转投Windows。<br>人们谈起机器学习，除了其烧钱的硬件外，混合高等数学、概率论、线性代数的理论知识其实更加令人头痛，大名鼎鼎的西瓜书更是手边不能离开数学教材。如此种种都说明了一个事实，大部分程序员没有独自设计神经网络的理论知识和能力。<br>而这也就是WindowsML震撼的地方,Nikola给我们当场演示了一个关于面部表情识别的demo，他向Visual Studio中拖拽了一个ONNX格式的网络模型文件，VS自动生成了相应的Input和Output函数，神经网络的使用被简化成了黑箱！输入数据，吐出数据，仅此而已。程序员可以无需关心网络实现，直接调用，而且并不局限于Python等少数语言。<br><img src="ml3.jpg" alt="VS中直接使用ONNX格式模型文件"><br><img src="ml4.jpg" alt="VS中直接使用ONNX格式模型文件"><br>那么，如何去获得ONNX文件呢？这张图给出了几种可能的方法:<br><img src="ml5.jpg" alt="如何获取ONNX文件"><br>前两种方法姑且不提，下载现成的文件和从其他模型文件转换大家都不难想到。后两种则是直接提供了一种不用写代码就能构建神经网络的方法！<br>在他的现场演示中，用户只需要直接选择模型类别（分类器/目标识别），然后按标签上传图片就可以了，Azure甚至会自动在云端帮你进行训练（速度还不慢）。训练完成后得到的ONNX文件则可以直接使用！从炼丹炉到炼丹术，Azure都帮你做完了，用户只要等着就好了。</p><h2 id="Windows-混合现实"><a href="#Windows-混合现实" class="headerlink" title="Windows 混合现实"></a>Windows 混合现实</h2><p>没钱，买不起，没听，下一个</p><h2 id="If-dev-Insider"><a href="#If-dev-Insider" class="headerlink" title="If(dev) { Insider(); }"></a>If(dev) { Insider(); }</h2><p>这个环节其实更多的是在介绍Insider项目的意义，主讲是Tyler Ahn大妈。她主要举了几个依靠insider成功的例子，得出了<code>{Insider(sth);}≠{Insider=true;}</code>这一结论。Insider计划是让million的人代表billion的人，同时给开发者一个机会，一个平台去实现他们的goal。个人感觉没啥干货，就口号喊得好听:</p><blockquote><p>Make your good code into great business.</p></blockquote><h2 id="F-amp-Q"><a href="#F-amp-Q" class="headerlink" title="F&amp;Q"></a>F&amp;Q</h2><p>作为最后一个环节，提问，大家参与度还是非常踊跃地，看看这排队的人：<br><img src="faq.jpg" alt="排队提问的人非常多"><br>其实部分问题还是挺尖锐的，包括消费者买得起的Hololens何时推出？有没有开源Groove音乐等Windows内置APP的可能来给开发者提供参考？Fluent Design能用在Web和Mobile上么？关于最后一个问题，Justin让希望在Web上看见Fluent Design的举手，其结果自然是全场齐举，莫名壮观。<del>Material Design可能要有对手了。</del></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>第一次参加DevTour这类活动，挺新奇的的。不过感觉收获挺大，了解到了很多很多的黑科技。同时“原来有这种东西，我之前做的XXX到底有什么意义！”这种感觉也让人爱恨交织。最后的最后，如果要用两个字来形容这次活动的话，<span style="font-size:1.5em;">好吃！</span><br>では、諸君は。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前一阵子收到了微软发给所有的insider的邀请邮件，大意说是DevTour即将巡回到北京，欢迎参加云云。弱鸡表示从来没听过这个名字，吓得我赶紧百度了一下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每年，我们都将最新的技术带给全球的开发者。今年，我们通过与Windows、Windows Insider项目以及我们的开发者和内部人士的合作伙伴关系，将活动扩展到更多的城市。我们将介绍人工智能，最新的桌面开发，微软365，进步网络应用，开发者办公室，混合现实，Microsoft Graph，等等。此次巡回活动是开发者与来自微软总部雷德蒙德的领导和工程师以及地区行业领先和微软开发者MVPs和RDs相互直接交流的一次绝佳机会。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;概括一下大概就是5个字：&lt;strong&gt;大佬见面会&lt;/strong&gt;&lt;br&gt;然而不幸的是这一天恰好是我考高数的日子，以前处在偏远山区的我看见这类活动只能望汤兴叹，好容易在北京，怎么能就这样鸽了呢？于是乎赶紧发邮件问了一下能否下午到场，所幸得到了肯定的答复。&lt;/p&gt;
&lt;h1 id=&quot;到达&quot;&gt;&lt;a href=&quot;#到达&quot; class=&quot;headerlink&quot; title=&quot;到达&quot;&gt;&lt;/a&gt;到达&lt;/h1&gt;&lt;p&gt;不得不吐槽沙河校区的偏远程度超乎想象，上午高数凉了（迫真）以后即使我以最快速度向会场赶，最终在会议开始前最后一刻才成功赶到。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="讲座" scheme="https://blog.gaojianli.me/tags/%E8%AE%B2%E5%BA%A7/"/>
    
      <category term="微软" scheme="https://blog.gaojianli.me/tags/%E5%BE%AE%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>写在前面</title>
    <link href="https://blog.gaojianli.me/2018/06/12/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/"/>
    <id>https://blog.gaojianli.me/2018/06/12/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</id>
    <published>2018-06-12T17:33:55.000Z</published>
    <updated>2020-12-10T18:22:25.031Z</updated>
    
    <content type="html"><![CDATA[<p>思前想后，看见大家都有了，我还是开一个博客吧。<br>之前一直懒得弄的原因是担心自己没有动力去写文章。但是，怎么说呢，完事开头难，人家潇都有了我怎么能没有呢！（笑）<br>也有这么一种不服气在里面就是了。<br>那就这样吧，希望能够坚持下去。<br>では、諸君は。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;思前想后，看见大家都有了，我还是开一个博客吧。&lt;br&gt;之前一直懒得弄的原因是担心自己没有动力去写文章。但是，怎么说呢，完事开头难，人家潇都有了我怎么能没有呢！（笑）&lt;br&gt;也有这么一种不服气在里面就是了。&lt;br&gt;那就这样吧，希望能够坚持下去。&lt;br&gt;では、諸君は。&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
